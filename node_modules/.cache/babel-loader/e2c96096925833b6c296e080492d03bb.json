{"ast":null,"code":"var _jsxFileName = \"/Users/lambda_school_loaner_126/Desktop/CMT-FE/src/Components/ThreeEffects/DefaultGlitch/DefaultTextGlitch.js\";\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { GlitchPass } from 'three/examples/jsm/postprocessing/GlitchPass.js';\nimport fontJSON from '../fonts/fontJSON.json';\nimport \"./Glitch.css\";\nexport default function DefaultTextGlitch(props) {\n  const GlitchRef = useRef();\n  useEffect(() => {\n    console.log(props, \"PROOOOOOOOOP\"); //==================THREEJS Stuff===================//\n\n    var camera, scene, renderer, composer;\n    console.log();\n    var object, light;\n    var glitchPass;\n    let textvar = props.text;\n    init();\n    animate();\n    var wildGlitch = document.getElementById('wildGlitch');\n    glitchPass.goWild = wildGlitch.checked;\n\n    function updateOptions() {\n      var wildGlitch = document.getElementById('wildGlitch');\n      glitchPass.goWild = wildGlitch.checked;\n    }\n\n    function init() {\n      renderer = new THREE.WebGLRenderer();\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      document.body.appendChild(renderer.domElement); //\n\n      camera = new THREE.PerspectiveCamera(150, window.innerWidth / window.innerHeight, 1, 1000);\n      camera.position.z = 400;\n      scene = new THREE.Scene();\n      scene.fog = new THREE.Fog(0x000000, 1, 1000);\n      object = new THREE.Object3D();\n      scene.add(object); //===============Background Loader=======================//\n\n      let loader = new THREE.TextureLoader();\n      const bgTexture = loader.load(props.background);\n      scene.background = bgTexture; //   const canvasAspect = window.clientWidth / window.clientHeight;\n      //   const imageAspect = bgTexture.image ? bgTexture.image.width / bgTexture.image.height : 1;\n      //   const aspect = imageAspect / canvasAspect;\n      //   bgTexture.offset.x = aspect > 1 ? (1 - 1 / aspect) / 2 : 0;\n      //   bgTexture.repeat.x = aspect > 1 ? 1 / aspect : 1;\n      //   bgTexture.offset.y = aspect > 1 ? 0 : (1 - aspect) / 2;\n      //   bgTexture.repeat.y = aspect > 1 ? 1 : aspect;\n      //============Font Geometry=================//\n\n      loader = new THREE.FontLoader();\n      var font = loader.parse(fontJSON);\n      var geometry = new THREE.TextGeometry(textvar, {\n        font: font,\n        size: 70,\n        height: 10,\n        material: 0,\n        bevelThickness: 1,\n        extrudeMaterial: 10\n      });\n      var material = new THREE.MeshPhongMaterial({\n        color: 0xffffff,\n        flatShading: true\n      });\n      var mesh = new THREE.Mesh(geometry, material);\n      object.add(mesh);\n      scene.add(new THREE.AmbientLight(0x222222));\n      light = new THREE.DirectionalLight(0xffffff);\n      light.position.set(1, 1, 1);\n      scene.add(light); // postprocessing\n\n      composer = new EffectComposer(renderer);\n      composer.addPass(new RenderPass(scene, camera));\n      glitchPass = new GlitchPass();\n      composer.addPass(glitchPass); //\n\n      window.addEventListener('resize', onWindowResize, false);\n      var wildGlitchOption = document.getElementById('wildGlitch');\n      wildGlitchOption.addEventListener('change', updateOptions);\n      updateOptions();\n    }\n\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      composer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    function animate() {\n      requestAnimationFrame(animate);\n      composer.render();\n    }\n  }, [props]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"Channel-Div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, props.channel), React.createElement(\"div\", {\n    ref: GlitchRef,\n    id: \"wildGlitch\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/lambda_school_loaner_126/Desktop/CMT-FE/src/Components/ThreeEffects/DefaultGlitch/DefaultTextGlitch.js"],"names":["React","useEffect","useRef","THREE","EffectComposer","RenderPass","GlitchPass","fontJSON","DefaultTextGlitch","props","GlitchRef","console","log","camera","scene","renderer","composer","object","light","glitchPass","textvar","text","init","animate","wildGlitch","document","getElementById","goWild","checked","updateOptions","WebGLRenderer","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","body","appendChild","domElement","PerspectiveCamera","position","z","Scene","fog","Fog","Object3D","add","loader","TextureLoader","bgTexture","load","background","FontLoader","font","parse","geometry","TextGeometry","size","height","material","bevelThickness","extrudeMaterial","MeshPhongMaterial","color","flatShading","mesh","Mesh","AmbientLight","DirectionalLight","set","addPass","addEventListener","onWindowResize","wildGlitchOption","aspect","updateProjectionMatrix","requestAnimationFrame","render","channel"],"mappings":"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","sourcesContent":["import React,{useEffect,useRef} from 'react'\nimport * as THREE from 'three'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js'\nimport {RenderPass} from 'three/examples/jsm/postprocessing/RenderPass.js'\nimport {GlitchPass} from 'three/examples/jsm/postprocessing/GlitchPass.js'\nimport fontJSON from '../fonts/fontJSON.json'\nimport \"./Glitch.css\"\nexport default function DefaultTextGlitch(props) {\n        const GlitchRef = useRef()\n        useEffect(() => {\n            console.log(props,\"PROOOOOOOOOP\")\n    //==================THREEJS Stuff===================//\n    var camera, scene, renderer, composer;\n    console.log()\n    var object, light;\n    var glitchPass;\n    let textvar = props.text\n    init();\n    animate();\n    var wildGlitch = document.getElementById( 'wildGlitch' );\n        glitchPass.goWild = wildGlitch.checked;\n    function updateOptions() {\n        var wildGlitch = document.getElementById( 'wildGlitch' );\n        glitchPass.goWild = wildGlitch.checked;\n    }\n    function init() {\n    renderer = new THREE.WebGLRenderer();\n        \n        renderer.setPixelRatio( window.devicePixelRatio );\n        renderer.setSize( window.innerWidth, window.innerHeight );\n        document.body.appendChild( renderer.domElement );\n        //\n        camera = new THREE.PerspectiveCamera( 150, window.innerWidth / window.innerHeight, 1, 1000 );\n        camera.position.z = 400;\n        scene = new THREE.Scene();\n        scene.fog = new THREE.Fog( 0x000000, 1, 1000 );\n        object = new THREE.Object3D();\n        scene.add( object );\n        //===============Background Loader=======================//\n        let loader = new THREE.TextureLoader();\n        const bgTexture = loader.load(props.background)\n        scene.background = bgTexture;\n    //   const canvasAspect = window.clientWidth / window.clientHeight;\n    //   const imageAspect = bgTexture.image ? bgTexture.image.width / bgTexture.image.height : 1;\n    //   const aspect = imageAspect / canvasAspect;\n    \n    //   bgTexture.offset.x = aspect > 1 ? (1 - 1 / aspect) / 2 : 0;\n    //   bgTexture.repeat.x = aspect > 1 ? 1 / aspect : 1;\n    \n    //   bgTexture.offset.y = aspect > 1 ? 0 : (1 - aspect) / 2;\n    //   bgTexture.repeat.y = aspect > 1 ? 1 : aspect;\n\n        //============Font Geometry=================//\n\n    loader = new THREE.FontLoader();\n        var font =loader.parse(fontJSON)\n        var geometry = new THREE.TextGeometry(textvar,{font:font, size: 70, height: 10, material: 0, bevelThickness: 1, extrudeMaterial:10})\n        var material = new THREE.MeshPhongMaterial( { color: 0xffffff, flatShading: true } );\n        var mesh = new THREE.Mesh(geometry,material)\n        object.add(mesh)\n        scene.add( new THREE.AmbientLight( 0x222222 ) );\n        light = new THREE.DirectionalLight( 0xffffff );\n        light.position.set( 1, 1, 1 );\n        scene.add( light );\n        // postprocessing\n        composer = new EffectComposer( renderer );\n        composer.addPass( new RenderPass( scene, camera ) );\n        glitchPass = new GlitchPass();\n        composer.addPass( glitchPass );\n        //\n        window.addEventListener( 'resize', onWindowResize, false );\n        var wildGlitchOption = document.getElementById( 'wildGlitch' );\n        wildGlitchOption.addEventListener( 'change', updateOptions );\n        updateOptions();\n    }\n    function onWindowResize() {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize( window.innerWidth, window.innerHeight );\n        composer.setSize( window.innerWidth, window.innerHeight );\n    }\nfunction animate() {\n    requestAnimationFrame( animate );\n    composer.render();\n}\n    }, [props])\n    return (\n        <div>\n            <div id = \"Channel-Div\">\n                {props.channel}\n            </div>\n            \n            <div ref={GlitchRef} id =\"wildGlitch\"></div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}