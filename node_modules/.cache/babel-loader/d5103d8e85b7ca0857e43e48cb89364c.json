{"ast":null,"code":"var _jsxFileName = \"/Users/lambda_school_loaner_126/Desktop/CMT-FE/src/Components/ThreeEffects/ComicBook/ComicBookEffect.js\";\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js';\nimport { RGBShiftShader } from 'three/examples/jsm/shaders/RGBShiftShader.js';\nimport { DotScreenShader } from 'three/examples/jsm/shaders/DotScreenShader.js';\nimport fontJSON from '../fonts/fontJSON.json';\nexport default function ComicBookEffect(props) {\n  useEffect(() => {\n    var camera, scene, renderer, composer;\n    var object, light;\n    const textvar = props.text;\n    init();\n    animate();\n\n    function init() {\n      renderer = new THREE.WebGLRenderer();\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      document.body.appendChild(renderer.domElement); //\n\n      camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 1000);\n      camera.position.z = 400;\n      scene = new THREE.Scene();\n      scene.fog = new THREE.Fog(0x000000, 1, 1000);\n      object = new THREE.Object3D();\n      scene.add(object); //==================Text===================//\n\n      var loader = new THREE.FontLoader();\n      var font = loader.parse(fontJSON);\n      var geometry = new THREE.TextGeometry(textvar, {\n        font: font,\n        size: 160,\n        height: 10,\n        material: 0,\n        bevelThickness: 1,\n        extrudeMaterial: 10\n      });\n      var material = new THREE.MeshPhongMaterial({\n        color: 0xffffff,\n        flatShading: true\n      });\n      var mesh = new THREE.Mesh(geometry, material);\n      object.add(mesh);\n      scene.add(new THREE.AmbientLight(0x222222));\n      light = new THREE.DirectionalLight(0xffffff);\n      light.position.set(1, 1, 1);\n      scene.add(light); // postprocessing\n\n      composer = new EffectComposer(renderer);\n      composer.addPass(new RenderPass(scene, camera));\n      var effect = new ShaderPass(DotScreenShader);\n      effect.uniforms['scale'].value = 4;\n      composer.addPass(effect);\n      var effect = new ShaderPass(RGBShiftShader);\n      effect.uniforms['amount'].value = 0.0015;\n      composer.addPass(effect);\n      window.addEventListener('resize', onWindowResize, false);\n      var wildGlitchOption = document.getElementById('Comic');\n      wildGlitchOption.addEventListener('change');\n      window.addEventListener('resize', onWindowResize, false);\n    }\n\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      composer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    function animate() {\n      requestAnimationFrame(animate);\n      object.rotation.x += 0.005;\n      object.rotation.y += 0.01;\n      composer.render();\n    }\n  }, [props]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"Comic\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/lambda_school_loaner_126/Desktop/CMT-FE/src/Components/ThreeEffects/ComicBook/ComicBookEffect.js"],"names":["React","useEffect","useRef","THREE","EffectComposer","RenderPass","ShaderPass","RGBShiftShader","DotScreenShader","fontJSON","ComicBookEffect","props","camera","scene","renderer","composer","object","light","textvar","text","init","animate","WebGLRenderer","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","document","body","appendChild","domElement","PerspectiveCamera","position","z","Scene","fog","Fog","Object3D","add","loader","FontLoader","font","parse","geometry","TextGeometry","size","height","material","bevelThickness","extrudeMaterial","MeshPhongMaterial","color","flatShading","mesh","Mesh","AmbientLight","DirectionalLight","set","addPass","effect","uniforms","value","addEventListener","onWindowResize","wildGlitchOption","getElementById","aspect","updateProjectionMatrix","requestAnimationFrame","rotation","x","y","render"],"mappings":"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","sourcesContent":["import React,{useEffect,useRef} from 'react'\nimport * as THREE from 'three';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js';\nimport { RGBShiftShader } from 'three/examples/jsm/shaders/RGBShiftShader.js';\nimport { DotScreenShader } from 'three/examples/jsm/shaders/DotScreenShader.js';\nimport fontJSON from '../fonts/fontJSON.json'\n\nexport default function ComicBookEffect(props) {\n    useEffect(() => {\n        var camera, scene, renderer, composer;\n        var object, light;\n        const textvar = props.text\n        init();\n        animate();\n        function init() {\n            renderer = new THREE.WebGLRenderer();\n            renderer.setPixelRatio( window.devicePixelRatio );\n            renderer.setSize( window.innerWidth, window.innerHeight );\n            document.body.appendChild( renderer.domElement );\n            //\n            camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 1000 );\n            camera.position.z = 400;\n            scene = new THREE.Scene();\n            scene.fog = new THREE.Fog( 0x000000, 1, 1000 );\n            object = new THREE.Object3D();\n            scene.add( object );\n            //==================Text===================//\n            var loader = new THREE.FontLoader();\n            var font =loader.parse(fontJSON)\n            var geometry = new THREE.TextGeometry(textvar,{font:font, size: 160, height: 10, material: 0, bevelThickness: 1, extrudeMaterial:10})\n            var material = new THREE.MeshPhongMaterial( { color: 0xffffff, flatShading: true } );\n            var mesh = new THREE.Mesh(geometry,material)\n            object.add(mesh)\n            scene.add( new THREE.AmbientLight( 0x222222 ) );\n            light = new THREE.DirectionalLight( 0xffffff );\n            light.position.set( 1, 1, 1 );\n            scene.add( light );\n            // postprocessing\n            composer = new EffectComposer( renderer );\n            composer.addPass( new RenderPass( scene, camera ) );\n            var effect = new ShaderPass( DotScreenShader );\n            effect.uniforms[ 'scale' ].value = 4;\n            composer.addPass( effect );\n            var effect = new ShaderPass( RGBShiftShader );\n            effect.uniforms[ 'amount' ].value = 0.0015;\n            composer.addPass( effect );\n            window.addEventListener( 'resize', onWindowResize, false );\n            var wildGlitchOption = document.getElementById( 'Comic' );\n            wildGlitchOption.addEventListener( 'change');\n            window.addEventListener( 'resize', onWindowResize, false );\n        }\n        function onWindowResize() {\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize( window.innerWidth, window.innerHeight );\n            composer.setSize( window.innerWidth, window.innerHeight );\n        }\n        function animate() {\n            requestAnimationFrame( animate );\n            object.rotation.x += 0.005;\n            object.rotation.y += 0.01;\n            composer.render();\n        }\n    }, [props])\n    return (\n        <div>\n            <div id = \"Comic\"></div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}