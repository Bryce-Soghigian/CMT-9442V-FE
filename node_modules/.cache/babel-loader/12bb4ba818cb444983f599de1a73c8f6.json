{"ast":null,"code":"var _jsxFileName = \"/Users/lambda_school_loaner_126/Desktop/CMT-FE/src/Components/ThreeEffects/DefaultGlitch/DefaultClass.js\";\nimport React, { Component } from 'react'; // import React,{useEffect,useRef} from 'react'\n\nimport * as THREE from 'three';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { GlitchPass } from 'three/examples/jsm/postprocessing/GlitchPass.js';\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport \"./Glitch.css\"; // export default function DefaultGlitch(props) {\n//     const GlitchRef = useRef()\n//     useEffect(() => {\n// //==================THREEJS Stuff===================//\n// var camera, scene, renderer, composer;\n// var object, light;\n// var glitchPass;\n// // let background = props.background.toString()\n// // console.log(typeof props.background)\n// console.log(\"google.com\")\n// init();\n// animate();\n// function updateOptions() {\n//     var wildGlitch = document.getElementById( 'wildGlitch' );\n//     glitchPass.goWild = wildGlitch.checked;\n// }\n// function init() {\n//     renderer = new THREE.WebGLRenderer();\n//     renderer.setPixelRatio( window.devicePixelRatio );\n//     renderer.setSize( window.innerWidth, window.innerHeight );\n//     document.body.appendChild( renderer.domElement );\n//     //\n//     camera = new THREE.PerspectiveCamera( 150, window.innerWidth / window.innerHeight, 1, 1000 );\n//     camera.position.z = 400;\n//     scene = new THREE.Scene();\n//     scene.fog = new THREE.Fog( 0x000000, 1, 1000 );\n//     object = new THREE.Object3D();\n//     scene.add( object );\n//     //============Box Geometry=================//\n//     function generateGeometry( objectType, numObjects ) {\n//         function applyVertexColors( geometry, color ) {\n//             var position = geometry.attributes.position;\n//             var colors = [];\n//             for ( var i = 0; i < position.count; i ++ ) {\n//                 colors.push( color.r, color.g, color.b );\n//             }\n//             geometry.setAttribute( 'color', new THREE.Float32BufferAttribute( colors, 3 ) );\n//         }\n//         var geometries = [];\n//         var matrix = new THREE.Matrix4();\n//         var position = new THREE.Vector3();\n//         var rotation = new THREE.Euler();\n//         var quaternion = new THREE.Quaternion();\n//         var scale = new THREE.Vector3();\n//         var color = new THREE.Color();\n//         for ( var i = 0; i < numObjects; i ++ ) {\n//             position.x = Math.random() * 10000 - 5000;\n//             position.y = Math.random() * 6000 - 3000;\n//             position.z = Math.random() * 8000 - 4000;\n//             rotation.x = Math.random() * 2 * Math.PI;\n//             rotation.y = Math.random() * 2 * Math.PI;\n//             rotation.z = Math.random() * 2 * Math.PI;\n//             quaternion.setFromEuler( rotation );\n//             scale.x = Math.random() * 200 + 100;\n//             var geometry;\n//             if ( objectType === 'cube' ) {\n//                 geometry = new THREE.BoxBufferGeometry( 1, 1, 1 );\n//                 geometry = geometry.toNonIndexed(); // merging needs consistent buffer geometries\n//                 scale.y = Math.random() * 200 + 100;\n//                 scale.z = Math.random() * 200 + 100;\n//                 color.setRGB( 0, 0, 0.1 + 0.9 * Math.random() );\n//             } else if ( objectType === 'sphere' ) {\n//                 geometry = new THREE.IcosahedronBufferGeometry( 1, 1 );\n//                 scale.y = scale.z = scale.x;\n//                 color.setRGB( 0.1 + 0.9 * Math.random(), 0, 0 );\n//             }\n//             // give the geom's vertices a random color, to be displayed\n//             applyVertexColors( geometry, color );\n//             matrix.compose( position, quaternion, scale );\n//             geometry.applyMatrix( matrix );\n//             geometries.push( geometry );\n//         }\n//         return BufferGeometryUtils.mergeBufferGeometries( geometries );\n//     }\n//     let loader = new THREE.TextureLoader();\n//     const bgTexture = loader.load(props.background);\n//     scene.background = bgTexture;\n//     //===============Light ====================//\n//     scene.add( new THREE.AmbientLight( 0x222222 ) );\n//     light = new THREE.DirectionalLight( 0xffffff );\n//     light.position.set( 1, 1, 1 );\n//     scene.add( light );\n//     // postprocessing\n//     composer = new EffectComposer( renderer );\n//     composer.addPass( new RenderPass( scene, camera ) );\n//     glitchPass = new GlitchPass();\n//     composer.addPass( glitchPass );\n//     //\n//     window.addEventListener( 'resize', onWindowResize, false );\n//     var wildGlitchOption = document.getElementById( 'wildGlitch' );\n//     wildGlitchOption.addEventListener( 'change', updateOptions );\n//     updateOptions();\n// }\n// function onWindowResize() {\n//     camera.aspect = window.innerWidth / window.innerHeight;\n//     camera.updateProjectionMatrix();\n//     renderer.setSize( window.innerWidth, window.innerHeight );\n//     composer.setSize( window.innerWidth, window.innerHeight );\n// }\n// function animate() {\n//     requestAnimationFrame( animate );\n//     composer.render();\n// }\n//     }, [GlitchRef])\n//     return (\n//         <div>\n// <div id = \"Channel-Div\">{props.channel}</div>\n//             <div ref={GlitchRef} id =\"wildGlitch\"></div>\n//         </div>\n//     )\n// }\n\nexport default class DefaultClass extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.start = () => {\n      if (!this.frameId) {\n        this.frameId = requestAnimationFrame(this.animate);\n      }\n    };\n\n    this.stop = () => {\n      cancelAnimationFrame(this.frameId);\n    };\n\n    this.animate = () => {\n      this.cube.rotation.x += 0.01;\n      this.cube.rotation.y += 0.01;\n      this.renderScene();\n      this.frameId = window.requestAnimationFrame(this.animate);\n    };\n\n    this.renderScene = () => {\n      this.renderer.render(this.scene, this.camera);\n    };\n  }\n\n  componentDidMount() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight; //ADD SCENE\n\n    this.scene = new THREE.Scene(); //ADD CAMERA\n\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    this.camera.position.z = 4; //ADD RENDERER\n\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    this.renderer.setClearColor('#000000');\n    this.renderer.setSize(width, height);\n    this.mount.appendChild(this.renderer.domElement); //ADD CUBE\n\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n    const material = new THREE.MeshBasicMaterial({\n      color: '#000000'\n    });\n    this.cube = new THREE.Mesh(geometry, material);\n    this.scene.add(this.cube);\n    this.start();\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        width: '400px',\n        height: '400px'\n      },\n      ref: mount => {\n        this.mount = mount;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/lambda_school_loaner_126/Desktop/CMT-FE/src/Components/ThreeEffects/DefaultGlitch/DefaultClass.js"],"names":["React","Component","THREE","EffectComposer","RenderPass","GlitchPass","BufferGeometryUtils","DefaultClass","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","cube","rotation","x","y","renderScene","window","renderer","render","scene","camera","componentDidMount","width","mount","clientWidth","height","clientHeight","Scene","PerspectiveCamera","position","z","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","geometry","BoxGeometry","material","MeshBasicMaterial","color","Mesh","add","componentWillUnmount","removeChild"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n// import React,{useEffect,useRef} from 'react'\nimport * as THREE from 'three'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js'\nimport {RenderPass} from 'three/examples/jsm/postprocessing/RenderPass.js'\nimport {GlitchPass} from 'three/examples/jsm/postprocessing/GlitchPass.js'\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport \"./Glitch.css\"\n\n// export default function DefaultGlitch(props) {\n//     const GlitchRef = useRef()\n//     useEffect(() => {\n// //==================THREEJS Stuff===================//\n// var camera, scene, renderer, composer;\n// var object, light;\n// var glitchPass;\n// // let background = props.background.toString()\n// // console.log(typeof props.background)\n// console.log(\"google.com\")\n// init();\n// animate();\n// function updateOptions() {\n//     var wildGlitch = document.getElementById( 'wildGlitch' );\n//     glitchPass.goWild = wildGlitch.checked;\n// }\n// function init() {\n//     renderer = new THREE.WebGLRenderer();\n//     renderer.setPixelRatio( window.devicePixelRatio );\n//     renderer.setSize( window.innerWidth, window.innerHeight );\n//     document.body.appendChild( renderer.domElement );\n//     //\n//     camera = new THREE.PerspectiveCamera( 150, window.innerWidth / window.innerHeight, 1, 1000 );\n//     camera.position.z = 400;\n//     scene = new THREE.Scene();\n//     scene.fog = new THREE.Fog( 0x000000, 1, 1000 );\n//     object = new THREE.Object3D();\n//     scene.add( object );\n\n//     //============Box Geometry=================//\n\n//     function generateGeometry( objectType, numObjects ) {\n//         function applyVertexColors( geometry, color ) {\n//             var position = geometry.attributes.position;\n//             var colors = [];\n//             for ( var i = 0; i < position.count; i ++ ) {\n//                 colors.push( color.r, color.g, color.b );\n//             }\n//             geometry.setAttribute( 'color', new THREE.Float32BufferAttribute( colors, 3 ) );\n//         }\n//         var geometries = [];\n//         var matrix = new THREE.Matrix4();\n//         var position = new THREE.Vector3();\n//         var rotation = new THREE.Euler();\n//         var quaternion = new THREE.Quaternion();\n//         var scale = new THREE.Vector3();\n//         var color = new THREE.Color();\n//         for ( var i = 0; i < numObjects; i ++ ) {\n//             position.x = Math.random() * 10000 - 5000;\n//             position.y = Math.random() * 6000 - 3000;\n//             position.z = Math.random() * 8000 - 4000;\n//             rotation.x = Math.random() * 2 * Math.PI;\n//             rotation.y = Math.random() * 2 * Math.PI;\n//             rotation.z = Math.random() * 2 * Math.PI;\n//             quaternion.setFromEuler( rotation );\n//             scale.x = Math.random() * 200 + 100;\n//             var geometry;\n//             if ( objectType === 'cube' ) {\n//                 geometry = new THREE.BoxBufferGeometry( 1, 1, 1 );\n//                 geometry = geometry.toNonIndexed(); // merging needs consistent buffer geometries\n//                 scale.y = Math.random() * 200 + 100;\n//                 scale.z = Math.random() * 200 + 100;\n//                 color.setRGB( 0, 0, 0.1 + 0.9 * Math.random() );\n//             } else if ( objectType === 'sphere' ) {\n//                 geometry = new THREE.IcosahedronBufferGeometry( 1, 1 );\n//                 scale.y = scale.z = scale.x;\n//                 color.setRGB( 0.1 + 0.9 * Math.random(), 0, 0 );\n//             }\n//             // give the geom's vertices a random color, to be displayed\n//             applyVertexColors( geometry, color );\n//             matrix.compose( position, quaternion, scale );\n//             geometry.applyMatrix( matrix );\n//             geometries.push( geometry );\n//         }\n//         return BufferGeometryUtils.mergeBufferGeometries( geometries );\n//     }\n\n//     let loader = new THREE.TextureLoader();\n//     const bgTexture = loader.load(props.background);\n//     scene.background = bgTexture;\n//     //===============Light ====================//\n//     scene.add( new THREE.AmbientLight( 0x222222 ) );\n//     light = new THREE.DirectionalLight( 0xffffff );\n//     light.position.set( 1, 1, 1 );\n//     scene.add( light );\n//     // postprocessing\n//     composer = new EffectComposer( renderer );\n//     composer.addPass( new RenderPass( scene, camera ) );\n//     glitchPass = new GlitchPass();\n//     composer.addPass( glitchPass );\n//     //\n//     window.addEventListener( 'resize', onWindowResize, false );\n//     var wildGlitchOption = document.getElementById( 'wildGlitch' );\n//     wildGlitchOption.addEventListener( 'change', updateOptions );\n//     updateOptions();\n// }\n// function onWindowResize() {\n//     camera.aspect = window.innerWidth / window.innerHeight;\n//     camera.updateProjectionMatrix();\n//     renderer.setSize( window.innerWidth, window.innerHeight );\n//     composer.setSize( window.innerWidth, window.innerHeight );\n// }\n// function animate() {\n//     requestAnimationFrame( animate );\n//     composer.render();\n// }\n//     }, [GlitchRef])\n//     return (\n//         <div>\n// <div id = \"Channel-Div\">{props.channel}</div>\n//             <div ref={GlitchRef} id =\"wildGlitch\"></div>\n//         </div>\n//     )\n// }\n\nexport default class DefaultClass extends Component {\n    componentDidMount(){\n        const width = this.mount.clientWidth\n        const height = this.mount.clientHeight\n        //ADD SCENE\n        this.scene = new THREE.Scene()\n        //ADD CAMERA\n        this.camera = new THREE.PerspectiveCamera(\n          75,\n          width / height,\n          0.1,\n          1000\n        )\n        this.camera.position.z = 4\n        //ADD RENDERER\n        this.renderer = new THREE.WebGLRenderer({ antialias: true })\n        this.renderer.setClearColor('#000000')\n        this.renderer.setSize(width, height)\n        this.mount.appendChild(this.renderer.domElement)\n        //ADD CUBE\n        const geometry = new THREE.BoxGeometry(1, 1, 1)\n        const material = new THREE.MeshBasicMaterial({ color: '#000000'     })\n        this.cube = new THREE.Mesh(geometry, material)\n        this.scene.add(this.cube)\n    this.start()\n      }\n    componentWillUnmount(){\n        this.stop()\n        this.mount.removeChild(this.renderer.domElement)\n      }\n    start = () => {\n        if (!this.frameId) {\n          this.frameId = requestAnimationFrame(this.animate)\n        }\n      }\n    stop = () => {\n        cancelAnimationFrame(this.frameId)\n      }\n    animate = () => {\n       this.cube.rotation.x += 0.01\n       this.cube.rotation.y += 0.01\n       this.renderScene()\n       this.frameId = window.requestAnimationFrame(this.animate)\n     }\n    renderScene = () => {\n      this.renderer.render(this.scene, this.camera)\n    }\n    render(){\n        return(\n          <div\n            style={{ width: '400px', height: '400px' }}\n            ref={(mount) => { this.mount = mount }}\n          />\n        )\n      }\n    }\n"]},"metadata":{},"sourceType":"module"}