{"ast":null,"code":"var _jsxFileName = \"/Users/lambda_school_loaner_126/Desktop/CMT-FE/src/Components/ThreeEffects/DefaultGlitch/DefaultClass.js\";\nimport React, { Component } from 'react'; // import React,{useEffect,useRef} from 'react'\n\nimport * as THREE from 'three';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { GlitchPass } from 'three/examples/jsm/postprocessing/GlitchPass.js';\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport \"./Glitch.css\";\nimport { isInterfaceDeclaration } from '@babel/types'; // export default function DefaultGlitch(props) {\n//     const GlitchRef = useRef()\n//     useEffect(() => {\n// //==================THREEJS Stuff===================//\n// var camera, scene, renderer, composer;\n// var object, light;\n// var glitchPass;\n// init();\n// animate();\n// function updateOptions() {\n//     var wildGlitch = document.getElementById( 'wildGlitch' );\n//     glitchPass.goWild = wildGlitch.checked;\n// }\n// function init() {\n//     renderer = new THREE.WebGLRenderer();\n//     renderer.setPixelRatio( window.devicePixelRatio );\n//     renderer.setSize( window.innerWidth, window.innerHeight );\n//     document.body.appendChild( renderer.domElement );\n//     //\n//     camera = new THREE.PerspectiveCamera( 150, window.innerWidth / window.innerHeight, 1, 1000 );\n//     camera.position.z = 400;\n//     scene = new THREE.Scene();\n//     scene.fog = new THREE.Fog( 0x000000, 1, 1000 );\n//     object = new THREE.Object3D();\n//     scene.add( object );\n//     let loader = new THREE.TextureLoader();\n//     const bgTexture = loader.load(props.background);\n//     scene.background = bgTexture;\n//     //===============Light ====================//\n//     scene.add( new THREE.AmbientLight( 0x222222 ) );\n//     light = new THREE.DirectionalLight( 0xffffff );\n//     light.position.set( 1, 1, 1 );\n//     scene.add( light );\n//     // postprocessing\n//     composer = new EffectComposer( renderer );\n//     composer.addPass( new RenderPass( scene, camera ) );\n//     glitchPass = new GlitchPass();\n//     composer.addPass( glitchPass );\n//     //\n//     window.addEventListener( 'resize', onWindowResize, false );\n//     var wildGlitchOption = document.getElementById( 'wildGlitch' );\n//     wildGlitchOption.addEventListener( 'change', updateOptions );\n//     updateOptions();\n// }\n// function onWindowResize() {\n//     camera.aspect = window.innerWidth / window.innerHeight;\n//     camera.updateProjectionMatrix();\n//     renderer.setSize( window.innerWidth, window.innerHeight );\n//     composer.setSize( window.innerWidth, window.innerHeight );\n// }\n// function animate() {\n//     requestAnimationFrame( animate );\n//     composer.render();\n// }\n//     }, [GlitchRef])\n//     return (\n//         <div>\n// <div id = \"Channel-Div\">{props.channel}</div>\n//             <div ref={GlitchRef} id =\"wildGlitch\"></div>\n//         </div>\n//     )\n// }\n\nexport default class DefaultClass extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.sceneSetup = () => {\n      const width = this.el.clientWidth;\n      const height = this.el.clientHeight;\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, // fov = field of view\n      width / height, // aspect ratio\n      0.1, // near plane\n      1000 // far plane\n      ); // set some distance from a cube that is located at z = 0\n\n      this.camera.position.z = 5;\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.setSize(width, height);\n      this.el.appendChild(this.renderer.domElement); // mount using React ref\n    };\n\n    this.addCustomSceneObjects = () => {\n      //========BG====================//\n      let loader = new THREE.TextureLoader();\n      const bgTexture = loader.load(background);\n      this.scene.background = bgTexture; //==============================//\n    };\n\n    this.startAnimationLoop = () => {\n      this.renderer.render(this.scene, this.camera);\n      this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n    };\n  }\n\n  componentDidMount() {\n    this.sceneSetup();\n    this.addCustomSceneObjects();\n    this.startAnimationLoop();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"return \", React.createElement(\"div\", {\n      ref: ref => this.el = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), \";\");\n  }\n\n} // export default class DefaultClass extends Component {\n//     componentDidMount(){\n//         const background = \"https://raw.githubusercontent.com/CMT-9442V/CMT-FE/master/src/Components/assets/images/nosignal8.jpg\"\n//         // this.init()\n//         // this.animate()\n//              function updateOptions() {\n//                 var wildGlitch = document.getElementById( 'wildGlitch' );\n//                 this.glitchPass.goWild = wildGlitch.checked;\n//             }\n//         const width = this.el.clientWidth\n//         const height = this.el.clientHeight\n//     //  const init =() =>{\n//          //============Renderer=======================//\n//     this.renderer = new THREE.WebGLRenderer();\n//     this.renderer.setPixelRatio( window.devicePixelRatio );\n//     this.renderer.setSize( width,height );\n//     document.body.appendChild( this.renderer.domElement );\n//     this.el.appendChild(this.renderer.domElement)\n// //==============Camera and Scene==================//\n//     this.camera = new THREE.PerspectiveCamera( 150, window.innerWidth / window.innerHeight, 1, 1000 );\n//     this.camera.position.z = 400;\n//     this.scene = new THREE.Scene();\n//     this.scene.fog = new THREE.Fog( 0x000000, 1, 1000 );\n//     this.object = new THREE.Object3D();\n//     this.scene.add( this.object );\n// //===============Background =====================//\n//     let loader = new THREE.TextureLoader();\n//     const bgTexture = loader.load(background);\n//     this.scene.background = bgTexture;\n// //===============Light===========================//\n//     this.scene.add( new THREE.AmbientLight( 0x222222 ) );\n//     this.light = new THREE.DirectionalLight( 0xffffff );\n//     this.light.position.set( 1, 1, 1 );\n//     this.scene.add( this.light );\n// //==============Postprocessing=====================//\n//     this.composer = new EffectComposer( this.renderer );\n//     this.composer.addPass( new RenderPass( this.scene, this.camera ) );\n//     this.glitchPass = new GlitchPass();\n//     this.composer.addPass( this.glitchPass );\n// //==============Making the Scene Responsive==========//\n// function onWindowResize() {\n//     this.camera.aspect = width/ height;\n//     this.camera.updateProjectionMatrix();\n//     this.renderer.setSize(width,height);\n//     this.composer.setSize( width,height );\n// }\n// //============Listeners===========================//\n//     window.addEventListener( 'resize', onWindowResize, false );\n//  //===============start animation===================//\n//     this.start()\n//       }\n//     componentWillUnmount(){\n//         this.stop()\n//         this.el.removeChild(this.renderer.domElement)\n//       }\n//     start = () => {\n//         if (!this.frameId) {\n//           this.frameId = requestAnimationFrame(this.animate)\n//         }\n//       }\n//     stop = () => {\n//         cancelAnimationFrame(this.frameId)\n//       }\n//     animate = () => {\n//         this.composer.render();\n//        this.renderScene()\n//        this.frameId = window.requestAnimationFrame(this.animate)\n//      }\n//     renderScene = () => {\n//       this.renderer.render(this.scene, this.camera)\n//     }\n//     render(){\n//         return(\n//         //   <div\n//         //     style={{ width: '100vh', height: '100vh' }}\n//         //     // ref={(mount) => { this.mount = mount }}\n//         //   />\n//          <div ref={ref => (this.el = ref)} />\n//         )\n//       }\n//     }","map":{"version":3,"sources":["/Users/lambda_school_loaner_126/Desktop/CMT-FE/src/Components/ThreeEffects/DefaultGlitch/DefaultClass.js"],"names":["React","Component","THREE","EffectComposer","RenderPass","GlitchPass","BufferGeometryUtils","isInterfaceDeclaration","DefaultClass","sceneSetup","width","el","clientWidth","height","clientHeight","scene","Scene","camera","PerspectiveCamera","position","z","renderer","WebGLRenderer","setSize","appendChild","domElement","addCustomSceneObjects","loader","TextureLoader","bgTexture","load","background","startAnimationLoop","render","requestID","window","requestAnimationFrame","componentDidMount","ref"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n// import React,{useEffect,useRef} from 'react'\nimport * as THREE from 'three'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js'\nimport {RenderPass} from 'three/examples/jsm/postprocessing/RenderPass.js'\nimport {GlitchPass} from 'three/examples/jsm/postprocessing/GlitchPass.js'\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport \"./Glitch.css\"\nimport { isInterfaceDeclaration } from '@babel/types'\n\n// export default function DefaultGlitch(props) {\n//     const GlitchRef = useRef()\n//     useEffect(() => {\n// //==================THREEJS Stuff===================//\n// var camera, scene, renderer, composer;\n// var object, light;\n// var glitchPass;\n\n// init();\n// animate();\n// function updateOptions() {\n//     var wildGlitch = document.getElementById( 'wildGlitch' );\n//     glitchPass.goWild = wildGlitch.checked;\n// }\n// function init() {\n//     renderer = new THREE.WebGLRenderer();\n//     renderer.setPixelRatio( window.devicePixelRatio );\n//     renderer.setSize( window.innerWidth, window.innerHeight );\n//     document.body.appendChild( renderer.domElement );\n//     //\n//     camera = new THREE.PerspectiveCamera( 150, window.innerWidth / window.innerHeight, 1, 1000 );\n//     camera.position.z = 400;\n//     scene = new THREE.Scene();\n//     scene.fog = new THREE.Fog( 0x000000, 1, 1000 );\n//     object = new THREE.Object3D();\n//     scene.add( object );\n\n\n\n//     let loader = new THREE.TextureLoader();\n//     const bgTexture = loader.load(props.background);\n//     scene.background = bgTexture;\n//     //===============Light ====================//\n//     scene.add( new THREE.AmbientLight( 0x222222 ) );\n//     light = new THREE.DirectionalLight( 0xffffff );\n//     light.position.set( 1, 1, 1 );\n//     scene.add( light );\n//     // postprocessing\n//     composer = new EffectComposer( renderer );\n//     composer.addPass( new RenderPass( scene, camera ) );\n//     glitchPass = new GlitchPass();\n//     composer.addPass( glitchPass );\n//     //\n//     window.addEventListener( 'resize', onWindowResize, false );\n//     var wildGlitchOption = document.getElementById( 'wildGlitch' );\n//     wildGlitchOption.addEventListener( 'change', updateOptions );\n//     updateOptions();\n// }\n// function onWindowResize() {\n//     camera.aspect = window.innerWidth / window.innerHeight;\n//     camera.updateProjectionMatrix();\n//     renderer.setSize( window.innerWidth, window.innerHeight );\n//     composer.setSize( window.innerWidth, window.innerHeight );\n// }\n// function animate() {\n//     requestAnimationFrame( animate );\n//     composer.render();\n// }\n//     }, [GlitchRef])\n//     return (\n//         <div>\n// <div id = \"Channel-Div\">{props.channel}</div>\n//             <div ref={GlitchRef} id =\"wildGlitch\"></div>\n//         </div>\n//     )\n// }\n\nexport default class DefaultClass extends Component {\n    componentDidMount() {\n        this.sceneSetup();\n        this.addCustomSceneObjects();\n        this.startAnimationLoop();\n    }\n    sceneSetup = () => {\n        const width = this.el.clientWidth;\n        const height = this.el.clientHeight;\n    \n        this.scene = new THREE.Scene();\n        this.camera = new THREE.PerspectiveCamera(\n            75, // fov = field of view\n            width / height, // aspect ratio\n            0.1, // near plane\n            1000 // far plane\n        );\n        \n        // set some distance from a cube that is located at z = 0\n        this.camera.position.z = 5;\n    \n        this.renderer = new THREE.WebGLRenderer();\n        this.renderer.setSize( width, height );\n        this.el.appendChild( this.renderer.domElement ); // mount using React ref\n    };\n    addCustomSceneObjects  = () => {\n        //========BG====================//\n        let loader = new THREE.TextureLoader();\n        const bgTexture = loader.load(background);\n        this.scene.background = bgTexture;\n        //==============================//\n    };\n    startAnimationLoop = () => {\n        this.renderer.render( this.scene, this.camera );\n        this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n    };\n    render() {\n        return (\n            <div>\n                return <div ref={ref => (this.el = ref)} />;\n            </div>\n        )\n    }\n}\n\n// export default class DefaultClass extends Component {\n//     componentDidMount(){\n//         const background = \"https://raw.githubusercontent.com/CMT-9442V/CMT-FE/master/src/Components/assets/images/nosignal8.jpg\"\n//         // this.init()\n//         // this.animate()\n//              function updateOptions() {\n//                 var wildGlitch = document.getElementById( 'wildGlitch' );\n//                 this.glitchPass.goWild = wildGlitch.checked;\n//             }\n//         const width = this.el.clientWidth\n//         const height = this.el.clientHeight\n//     //  const init =() =>{\n//          //============Renderer=======================//\n//     this.renderer = new THREE.WebGLRenderer();\n//     this.renderer.setPixelRatio( window.devicePixelRatio );\n//     this.renderer.setSize( width,height );\n//     document.body.appendChild( this.renderer.domElement );\n//     this.el.appendChild(this.renderer.domElement)\n// //==============Camera and Scene==================//\n//     this.camera = new THREE.PerspectiveCamera( 150, window.innerWidth / window.innerHeight, 1, 1000 );\n//     this.camera.position.z = 400;\n//     this.scene = new THREE.Scene();\n//     this.scene.fog = new THREE.Fog( 0x000000, 1, 1000 );\n//     this.object = new THREE.Object3D();\n//     this.scene.add( this.object );\n// //===============Background =====================//\n//     let loader = new THREE.TextureLoader();\n//     const bgTexture = loader.load(background);\n//     this.scene.background = bgTexture;\n// //===============Light===========================//\n//     this.scene.add( new THREE.AmbientLight( 0x222222 ) );\n//     this.light = new THREE.DirectionalLight( 0xffffff );\n//     this.light.position.set( 1, 1, 1 );\n//     this.scene.add( this.light );\n// //==============Postprocessing=====================//\n//     this.composer = new EffectComposer( this.renderer );\n//     this.composer.addPass( new RenderPass( this.scene, this.camera ) );\n//     this.glitchPass = new GlitchPass();\n//     this.composer.addPass( this.glitchPass );\n// //==============Making the Scene Responsive==========//\n// function onWindowResize() {\n//     this.camera.aspect = width/ height;\n//     this.camera.updateProjectionMatrix();\n//     this.renderer.setSize(width,height);\n//     this.composer.setSize( width,height );\n// }\n// //============Listeners===========================//\n//     window.addEventListener( 'resize', onWindowResize, false );\n//  //===============start animation===================//\n//     this.start()\n\n\n//       }\n//     componentWillUnmount(){\n//         this.stop()\n//         this.el.removeChild(this.renderer.domElement)\n//       }\n//     start = () => {\n//         if (!this.frameId) {\n//           this.frameId = requestAnimationFrame(this.animate)\n\n//         }\n//       }\n//     stop = () => {\n//         cancelAnimationFrame(this.frameId)\n//       }\n//     animate = () => {\n//         this.composer.render();\n//        this.renderScene()\n//        this.frameId = window.requestAnimationFrame(this.animate)\n//      }\n//     renderScene = () => {\n//       this.renderer.render(this.scene, this.camera)\n//     }\n//     render(){\n//         return(\n//         //   <div\n//         //     style={{ width: '100vh', height: '100vh' }}\n//         //     // ref={(mount) => { this.mount = mount }}\n\n//         //   />\n//          <div ref={ref => (this.el = ref)} />\n\n//         )\n//       }\n//     }\n"]},"metadata":{},"sourceType":"module"}