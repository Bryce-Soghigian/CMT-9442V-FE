{"ast":null,"code":"var _jsxFileName = \"/Users/lambda_school_loaner_126/Desktop/CMT-FE/src/Components/ThreeEffects/DefaultGlitch/DefaultClass.js\";\nimport React, { Component } from 'react'; // import React,{useEffect,useRef} from 'react'\n\nimport * as THREE from 'three';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { GlitchPass } from 'three/examples/jsm/postprocessing/GlitchPass.js';\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport \"./Glitch.css\";\nimport { isInterfaceDeclaration } from '@babel/types'; // export default function DefaultGlitch(props) {\n//     const GlitchRef = useRef()\n//     useEffect(() => {\n// //==================THREEJS Stuff===================//\n// var camera, scene, renderer, composer;\n// var object, light;\n// var glitchPass;\n// init();\n// animate();\n// function updateOptions() {\n//     var wildGlitch = document.getElementById( 'wildGlitch' );\n//     glitchPass.goWild = wildGlitch.checked;\n// }\n// function init() {\n//     renderer = new THREE.WebGLRenderer();\n//     renderer.setPixelRatio( window.devicePixelRatio );\n//     renderer.setSize( window.innerWidth, window.innerHeight );\n//     document.body.appendChild( renderer.domElement );\n//     //\n//     camera = new THREE.PerspectiveCamera( 150, window.innerWidth / window.innerHeight, 1, 1000 );\n//     camera.position.z = 400;\n//     scene = new THREE.Scene();\n//     scene.fog = new THREE.Fog( 0x000000, 1, 1000 );\n//     object = new THREE.Object3D();\n//     scene.add( object );\n//     let loader = new THREE.TextureLoader();\n//     const bgTexture = loader.load(props.background);\n//     scene.background = bgTexture;\n//     //===============Light ====================//\n//     scene.add( new THREE.AmbientLight( 0x222222 ) );\n//     light = new THREE.DirectionalLight( 0xffffff );\n//     light.position.set( 1, 1, 1 );\n//     scene.add( light );\n//     // postprocessing\n//     composer = new EffectComposer( renderer );\n//     composer.addPass( new RenderPass( scene, camera ) );\n//     glitchPass = new GlitchPass();\n//     composer.addPass( glitchPass );\n//     //\n//     window.addEventListener( 'resize', onWindowResize, false );\n//     var wildGlitchOption = document.getElementById( 'wildGlitch' );\n//     wildGlitchOption.addEventListener( 'change', updateOptions );\n//     updateOptions();\n// }\n// function onWindowResize() {\n//     camera.aspect = window.innerWidth / window.innerHeight;\n//     camera.updateProjectionMatrix();\n//     renderer.setSize( window.innerWidth, window.innerHeight );\n//     composer.setSize( window.innerWidth, window.innerHeight );\n// }\n// function animate() {\n//     requestAnimationFrame( animate );\n//     composer.render();\n// }\n//     }, [GlitchRef])\n//     return (\n//         <div>\n// <div id = \"Channel-Div\">{props.channel}</div>\n//             <div ref={GlitchRef} id =\"wildGlitch\"></div>\n//         </div>\n//     )\n// }\n\nexport default class DefaultClass extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.start = () => {\n      if (!this.frameId) {\n        this.frameId = requestAnimationFrame(this.animate);\n      }\n    };\n\n    this.stop = () => {\n      cancelAnimationFrame(this.frameId);\n    };\n\n    this.animate = () => {\n      this.cube.rotation.x += 0.01;\n      this.cube.rotation.y += 0.01;\n      this.renderScene();\n      this.frameId = window.requestAnimationFrame(this.animate);\n    };\n\n    this.renderScene = () => {\n      this.renderer.render(this.scene, this.camera);\n    };\n  }\n\n  componentDidMount() {\n    const background = \"https://raw.githubusercontent.com/CMT-9442V/CMT-FE/master/src/Components/assets/images/nosignal8.jpg\";\n    this.init();\n    this.animate();\n\n    function updateOptions() {\n      var wildGlitch = document.getElementById('wildGlitch');\n      this.glitchPass.goWild = wildGlitch.checked;\n    }\n\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n\n    const init = () => {\n      //============Renderer=======================//\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      document.body.appendChild(this.renderer.domElement);\n      this.mount.appendChild(this.renderer.domElement); //==============Camera and Scene==================//\n\n      this.camera = new THREE.PerspectiveCamera(150, window.innerWidth / window.innerHeight, 1, 1000);\n      this.camera.position.z = 400;\n      this.scene = new THREE.Scene();\n      this.scene.fog = new THREE.Fog(0x000000, 1, 1000);\n      this.object = new THREE.Object3D();\n      this.scene.add(this.object); //===============Background =====================//\n\n      let loader = new THREE.TextureLoader();\n      const bgTexture = loader.load(background);\n      this.scene.background = bgTexture; //===============Light===========================//\n\n      this.scene.add(new THREE.AmbientLight(0x222222));\n      this.light = new THREE.DirectionalLight(0xffffff);\n      this.light.position.set(1, 1, 1);\n      this.scene.add(this.light);\n    }; //ADD SCENE\n    // this.scene = new THREE.Scene()\n    //ADD CAMERA\n    // this.camera = new THREE.PerspectiveCamera(\n    //   75,\n    //   width / height,\n    //   0.1,\n    //   1000\n    // )\n    // this.camera.position.z = 4\n    //ADD RENDERER\n    // this.renderer = new THREE.WebGLRenderer({ antialias: true })\n    // this.renderer.setClearColor('#000000')\n    // this.renderer.setSize(width, height)\n    // this.mount.appendChild(this.renderer.domElement)\n    //ADD CUBE\n\n\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n    const material = new THREE.MeshBasicMaterial({\n      color: '#FFF'\n    });\n    this.cube = new THREE.Mesh(geometry, material);\n    this.scene.add(this.cube);\n    this.start();\n    this.init();\n    this.animate();\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        width: '100vh',\n        height: '100vh'\n      },\n      ref: mount => {\n        this.mount = mount;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/lambda_school_loaner_126/Desktop/CMT-FE/src/Components/ThreeEffects/DefaultGlitch/DefaultClass.js"],"names":["React","Component","THREE","EffectComposer","RenderPass","GlitchPass","BufferGeometryUtils","isInterfaceDeclaration","DefaultClass","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","cube","rotation","x","y","renderScene","window","renderer","render","scene","camera","componentDidMount","background","init","updateOptions","wildGlitch","document","getElementById","glitchPass","goWild","checked","width","mount","clientWidth","height","clientHeight","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","innerWidth","innerHeight","body","appendChild","domElement","PerspectiveCamera","position","z","Scene","fog","Fog","object","Object3D","add","loader","TextureLoader","bgTexture","load","AmbientLight","light","DirectionalLight","set","geometry","BoxGeometry","material","MeshBasicMaterial","color","Mesh","componentWillUnmount","removeChild"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n// import React,{useEffect,useRef} from 'react'\nimport * as THREE from 'three'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js'\nimport {RenderPass} from 'three/examples/jsm/postprocessing/RenderPass.js'\nimport {GlitchPass} from 'three/examples/jsm/postprocessing/GlitchPass.js'\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport \"./Glitch.css\"\nimport { isInterfaceDeclaration } from '@babel/types'\n\n// export default function DefaultGlitch(props) {\n//     const GlitchRef = useRef()\n//     useEffect(() => {\n// //==================THREEJS Stuff===================//\n// var camera, scene, renderer, composer;\n// var object, light;\n// var glitchPass;\n\n// init();\n// animate();\n// function updateOptions() {\n//     var wildGlitch = document.getElementById( 'wildGlitch' );\n//     glitchPass.goWild = wildGlitch.checked;\n// }\n// function init() {\n//     renderer = new THREE.WebGLRenderer();\n//     renderer.setPixelRatio( window.devicePixelRatio );\n//     renderer.setSize( window.innerWidth, window.innerHeight );\n//     document.body.appendChild( renderer.domElement );\n//     //\n//     camera = new THREE.PerspectiveCamera( 150, window.innerWidth / window.innerHeight, 1, 1000 );\n//     camera.position.z = 400;\n//     scene = new THREE.Scene();\n//     scene.fog = new THREE.Fog( 0x000000, 1, 1000 );\n//     object = new THREE.Object3D();\n//     scene.add( object );\n\n\n\n//     let loader = new THREE.TextureLoader();\n//     const bgTexture = loader.load(props.background);\n//     scene.background = bgTexture;\n//     //===============Light ====================//\n//     scene.add( new THREE.AmbientLight( 0x222222 ) );\n//     light = new THREE.DirectionalLight( 0xffffff );\n//     light.position.set( 1, 1, 1 );\n//     scene.add( light );\n//     // postprocessing\n//     composer = new EffectComposer( renderer );\n//     composer.addPass( new RenderPass( scene, camera ) );\n//     glitchPass = new GlitchPass();\n//     composer.addPass( glitchPass );\n//     //\n//     window.addEventListener( 'resize', onWindowResize, false );\n//     var wildGlitchOption = document.getElementById( 'wildGlitch' );\n//     wildGlitchOption.addEventListener( 'change', updateOptions );\n//     updateOptions();\n// }\n// function onWindowResize() {\n//     camera.aspect = window.innerWidth / window.innerHeight;\n//     camera.updateProjectionMatrix();\n//     renderer.setSize( window.innerWidth, window.innerHeight );\n//     composer.setSize( window.innerWidth, window.innerHeight );\n// }\n// function animate() {\n//     requestAnimationFrame( animate );\n//     composer.render();\n// }\n//     }, [GlitchRef])\n//     return (\n//         <div>\n// <div id = \"Channel-Div\">{props.channel}</div>\n//             <div ref={GlitchRef} id =\"wildGlitch\"></div>\n//         </div>\n//     )\n// }\n\nexport default class DefaultClass extends Component {\n    componentDidMount(){\n        const background = \"https://raw.githubusercontent.com/CMT-9442V/CMT-FE/master/src/Components/assets/images/nosignal8.jpg\"\n        this.init()\n        this.animate()\n             function updateOptions() {\n                var wildGlitch = document.getElementById( 'wildGlitch' );\n                this.glitchPass.goWild = wildGlitch.checked;\n            }\n        const width = this.mount.clientWidth\n        const height = this.mount.clientHeight\n     const init =() =>{\n         //============Renderer=======================//\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setPixelRatio( window.devicePixelRatio );\n    this.renderer.setSize( window.innerWidth, window.innerHeight );\n    document.body.appendChild( this.renderer.domElement );\n    this.mount.appendChild(this.renderer.domElement)\n//==============Camera and Scene==================//\n    this.camera = new THREE.PerspectiveCamera( 150, window.innerWidth / window.innerHeight, 1, 1000 );\n    this.camera.position.z = 400;\n    this.scene = new THREE.Scene();\n    this.scene.fog = new THREE.Fog( 0x000000, 1, 1000 );\n    this.object = new THREE.Object3D();\n    this.scene.add( this.object );\n//===============Background =====================//\n    let loader = new THREE.TextureLoader();\n    const bgTexture = loader.load(background);\n    this.scene.background = bgTexture;\n//===============Light===========================//\n    this.scene.add( new THREE.AmbientLight( 0x222222 ) );\n    this.light = new THREE.DirectionalLight( 0xffffff );\n    this.light.position.set( 1, 1, 1 );\n    this.scene.add( this.light );\n\n\n        }\n        //ADD SCENE\n        // this.scene = new THREE.Scene()\n        //ADD CAMERA\n        // this.camera = new THREE.PerspectiveCamera(\n        //   75,\n        //   width / height,\n        //   0.1,\n        //   1000\n        // )\n        // this.camera.position.z = 4\n        //ADD RENDERER\n        // this.renderer = new THREE.WebGLRenderer({ antialias: true })\n        // this.renderer.setClearColor('#000000')\n        // this.renderer.setSize(width, height)\n        // this.mount.appendChild(this.renderer.domElement)\n        //ADD CUBE\n        const geometry = new THREE.BoxGeometry(1, 1, 1)\n        const material = new THREE.MeshBasicMaterial({ color: '#FFF'     })\n        this.cube = new THREE.Mesh(geometry, material)\n        this.scene.add(this.cube)\n    this.start()\n    this.init()\n    this.animate()\n\n      }\n    componentWillUnmount(){\n        this.stop()\n        this.mount.removeChild(this.renderer.domElement)\n      }\n    start = () => {\n        if (!this.frameId) {\n          this.frameId = requestAnimationFrame(this.animate)\n        }\n      }\n    stop = () => {\n        cancelAnimationFrame(this.frameId)\n      }\n    animate = () => {\n       this.cube.rotation.x += 0.01\n       this.cube.rotation.y += 0.01\n       this.renderScene()\n       this.frameId = window.requestAnimationFrame(this.animate)\n     }\n    renderScene = () => {\n      this.renderer.render(this.scene, this.camera)\n    }\n    render(){\n        return(\n          <div\n            style={{ width: '100vh', height: '100vh' }}\n            ref={(mount) => { this.mount = mount }}\n          />\n        )\n      }\n    }\n"]},"metadata":{},"sourceType":"module"}