{"ast":null,"code":"var _jsxFileName = \"/Users/lambda_school_loaner_126/Desktop/CMT-FE/src/Components/ThreeEffects/DefaultGlitch/DefaultStars.js\";\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { GlitchPass } from 'three/examples/jsm/postprocessing/GlitchPass.js';\nexport default function DefaultCirclesGlitch() {\n  const GlitchRef = useRef();\n  useEffect(() => {\n    //==================THREEJS Stuff===================//\n    var camera, scene, renderer, composer;\n    var object, light;\n    var glitchPass;\n    init();\n    animate();\n\n    function updateOptions() {\n      var wildGlitch = document.getElementById('wildGlitch');\n      glitchPass.goWild = wildGlitch.checked;\n    }\n\n    function init() {\n      renderer = new THREE.WebGLRenderer();\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      document.body.appendChild(renderer.domElement); //\n\n      camera = new THREE.PerspectiveCamera(150, window.innerWidth / window.innerHeight, 1, 1000);\n      camera.position.z = 400;\n      scene = new THREE.Scene();\n      scene.fog = new THREE.Fog(0x000000, 1, 1000);\n      object = new THREE.Object3D();\n      scene.add(object); //============Font Geometry=================//\n\n      var geometry = new THREE.SphereBufferGeometry(1, 1, 1);\n\n      for (var i = 0; i < 100; i++) {\n        var material = new THREE.MeshPhongMaterial({\n          color: 0xffffff * Math.random(),\n          flatShading: true\n        });\n        var mesh = new THREE.Mesh(geometry, material);\n        mesh.position.set(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5).normalize();\n        mesh.position.multiplyScalar(Math.random() * 400);\n        mesh.rotation.set(Math.random() * 2, Math.random() * 2, Math.random() * 2);\n        mesh.scale.x = mesh.scale.y = mesh.scale.z = Math.random() * 50;\n        object.add(mesh);\n      } //===============Light ====================//\n\n\n      scene.add(new THREE.AmbientLight(0x222222));\n      light = new THREE.DirectionalLight(0xffffff);\n      light.position.set(1, 1, 1);\n      scene.add(light); // postprocessing\n\n      composer = new EffectComposer(renderer);\n      composer.addPass(new RenderPass(scene, camera));\n      glitchPass = new GlitchPass();\n      composer.addPass(glitchPass); //\n\n      window.addEventListener('resize', onWindowResize, false);\n      var wildGlitchOption = document.getElementById('wildGlitch');\n      wildGlitchOption.addEventListener('change', updateOptions);\n      updateOptions();\n    }\n\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      composer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    function animate() {\n      requestAnimationFrame(animate);\n      composer.render();\n    }\n  }, [GlitchRef]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    ref: GlitchRef,\n    id: \"wildGlitch\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/lambda_school_loaner_126/Desktop/CMT-FE/src/Components/ThreeEffects/DefaultGlitch/DefaultStars.js"],"names":["React","useEffect","useRef","THREE","EffectComposer","RenderPass","GlitchPass","DefaultCirclesGlitch","GlitchRef","camera","scene","renderer","composer","object","light","glitchPass","init","animate","updateOptions","wildGlitch","document","getElementById","goWild","checked","WebGLRenderer","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","body","appendChild","domElement","PerspectiveCamera","position","z","Scene","fog","Fog","Object3D","add","geometry","SphereBufferGeometry","i","material","MeshPhongMaterial","color","Math","random","flatShading","mesh","Mesh","set","normalize","multiplyScalar","rotation","scale","x","y","AmbientLight","DirectionalLight","addPass","addEventListener","onWindowResize","wildGlitchOption","aspect","updateProjectionMatrix","requestAnimationFrame","render"],"mappings":"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","sourcesContent":["import React,{useEffect,useRef} from 'react'\nimport * as THREE from 'three'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js'\nimport {RenderPass} from 'three/examples/jsm/postprocessing/RenderPass.js'\nimport {GlitchPass} from 'three/examples/jsm/postprocessing/GlitchPass.js'\n\n\nexport default function DefaultCirclesGlitch() {\n    const GlitchRef = useRef()\n    useEffect(() => {\n//==================THREEJS Stuff===================//\nvar camera, scene, renderer, composer;\nvar object, light;\nvar glitchPass;\n\ninit();\nanimate();\nfunction updateOptions() {\n    var wildGlitch = document.getElementById( 'wildGlitch' );\n    glitchPass.goWild = wildGlitch.checked;\n}\nfunction init() {\n    renderer = new THREE.WebGLRenderer();\n    renderer.setPixelRatio( window.devicePixelRatio );\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    document.body.appendChild( renderer.domElement );\n    //\n    camera = new THREE.PerspectiveCamera( 150, window.innerWidth / window.innerHeight, 1, 1000 );\n    camera.position.z = 400;\n    scene = new THREE.Scene();\n    scene.fog = new THREE.Fog( 0x000000, 1, 1000 );\n    object = new THREE.Object3D();\n    scene.add( object );\n\n    //============Font Geometry=================//\n\n    var geometry = new THREE.SphereBufferGeometry( 1, 1, 1);\n    for ( var i = 0; i < 100; i ++ ) {\n        var material = new THREE.MeshPhongMaterial( { color: 0xffffff * Math.random(), flatShading: true } );\n        var mesh = new THREE.Mesh( geometry, material );\n        mesh.position.set( Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5 ).normalize();\n        mesh.position.multiplyScalar( Math.random() * 400 );\n        mesh.rotation.set( Math.random() * 2, Math.random() * 2, Math.random() * 2 );\n        mesh.scale.x = mesh.scale.y = mesh.scale.z = Math.random() * 50;\n        object.add( mesh );\n    }\n\n    //===============Light ====================//\n    scene.add( new THREE.AmbientLight( 0x222222 ) );\n    light = new THREE.DirectionalLight( 0xffffff );\n    light.position.set( 1, 1, 1 );\n    scene.add( light );\n    // postprocessing\n    composer = new EffectComposer( renderer );\n    composer.addPass( new RenderPass( scene, camera ) );\n    glitchPass = new GlitchPass();\n    composer.addPass( glitchPass );\n    //\n    window.addEventListener( 'resize', onWindowResize, false );\n    var wildGlitchOption = document.getElementById( 'wildGlitch' );\n    wildGlitchOption.addEventListener( 'change', updateOptions );\n    updateOptions();\n}\nfunction onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    composer.setSize( window.innerWidth, window.innerHeight );\n}\nfunction animate() {\n    requestAnimationFrame( animate );\n    composer.render();\n}\n    }, [GlitchRef])\n    return (\n        <div>\n            <div ref={GlitchRef} id =\"wildGlitch\"></div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}