{"ast":null,"code":"var _jsxFileName = \"/Users/lambda_school_loaner_126/Desktop/CMT-FE/src/Components/ThreeEffects/CreepyLight/CreepyLightText.js\";\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\nimport { GodRaysFakeSunShader, GodRaysDepthMaskShader, GodRaysCombineShader, GodRaysGenerateShader } from 'three/examples/jsm/shaders/GodRaysShader.js';\nimport fontJSON from '../fonts/fontJSON.json';\nimport \"./CreepyLight.css\"; //Got Geometry from docs\n\nexport default function CreepyLightText(props) {\n  const ref = useRef();\n  useEffect(() => {\n    var container, stats;\n    var camera, scene, renderer, materialDepth;\n    var sphereMesh;\n    var textvar = props.text;\n    var sunPosition = new THREE.Vector3(0, 1000, -1000);\n    var screenSpacePosition = new THREE.Vector3();\n    var mouseX = 0,\n        mouseY = 0;\n    var postprocessing = {\n      enabled: true\n    };\n    var orbitRadius = 200;\n    var bgColor = 0x000511;\n    var sunColor = 0xffee00; // Use a smaller size for some of the god-ray render targets for better performance.\n\n    var godrayRenderTargetResolutionMultiplier = 1.0 / 4.0;\n    init();\n    animate();\n\n    function init() {\n      container = document.createElement('div');\n      document.body.appendChild(container); //\n\n      camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 3000);\n      camera.position.z = 200;\n      scene = new THREE.Scene(); //\n\n      materialDepth = new THREE.MeshDepthMaterial();\n      var materialScene = new THREE.MeshBasicMaterial({\n        color: 0x000000\n      }); // text\n\n      var loader = new THREE.FontLoader();\n      var font = loader.parse(fontJSON);\n      var geometry = new THREE.TextGeometry(textvar, {\n        font: font,\n        size: 160,\n        height: 10,\n        material: 0,\n        bevelThickness: 1,\n        extrudeMaterial: 10\n      });\n      var material = new THREE.MeshPhongMaterial({\n        color: 0xffffff,\n        flatShading: true\n      });\n      var mesh = new THREE.Mesh(geometry, material);\n      scene.add(mesh); // sphere\n\n      var geo = new THREE.SphereBufferGeometry(1, 20, 10);\n      sphereMesh = new THREE.Mesh(geo, materialScene);\n      sphereMesh.scale.multiplyScalar(20);\n      scene.add(sphereMesh); //\n\n      renderer = new THREE.WebGLRenderer();\n      renderer.setClearColor(0xffffff);\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      container.appendChild(renderer.domElement);\n      renderer.autoClear = false; //\n\n      document.addEventListener('mousemove', onDocumentMouseMove, false);\n      document.addEventListener('touchstart', onDocumentTouchStart, false);\n      document.addEventListener('touchmove', onDocumentTouchMove, false);\n      window.addEventListener('resize', onWindowResize, false); //\n\n      initPostprocessing(window.innerWidth, window.innerHeight);\n    } //\n\n\n    function onDocumentMouseMove(event) {\n      mouseX = event.clientX - window.innerWidth / 2;\n      mouseY = event.clientY - window.innerHeight / 2;\n    }\n\n    function onDocumentTouchStart(event) {\n      if (event.touches.length === 1) {\n        event.preventDefault();\n        mouseX = event.touches[0].pageX - window.innerWidth / 2;\n        mouseY = event.touches[0].pageY - window.innerHeight / 2;\n      }\n    }\n\n    function onDocumentTouchMove(event) {\n      if (event.touches.length === 1) {\n        event.preventDefault();\n        mouseX = event.touches[0].pageX - window.innerWidth / 2;\n        mouseY = event.touches[0].pageY - window.innerHeight / 2;\n      }\n    } //\n\n\n    function onWindowResize() {\n      var renderTargetWidth = window.innerWidth;\n      var renderTargetHeight = window.innerHeight;\n      camera.aspect = renderTargetWidth / renderTargetHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(renderTargetWidth, renderTargetHeight);\n      postprocessing.rtTextureColors.setSize(renderTargetWidth, renderTargetHeight);\n      postprocessing.rtTextureDepth.setSize(renderTargetWidth, renderTargetHeight);\n      postprocessing.rtTextureDepthMask.setSize(renderTargetWidth, renderTargetHeight);\n      var adjustedWidth = renderTargetWidth * godrayRenderTargetResolutionMultiplier;\n      var adjustedHeight = renderTargetHeight * godrayRenderTargetResolutionMultiplier;\n      postprocessing.rtTextureGodRays1.setSize(adjustedWidth, adjustedHeight);\n      postprocessing.rtTextureGodRays2.setSize(adjustedWidth, adjustedHeight);\n    }\n\n    function initPostprocessing(renderTargetWidth, renderTargetHeight) {\n      postprocessing.scene = new THREE.Scene();\n      postprocessing.camera = new THREE.OrthographicCamera(-0.5, 0.5, 0.5, -0.5, -10000, 10000);\n      postprocessing.camera.position.z = 100;\n      postprocessing.scene.add(postprocessing.camera);\n      var pars = {\n        minFilter: THREE.LinearFilter,\n        magFilter: THREE.LinearFilter,\n        format: THREE.RGBFormat\n      };\n      postprocessing.rtTextureColors = new THREE.WebGLRenderTarget(renderTargetWidth, renderTargetHeight, pars); // Switching the depth formats to luminance from rgb doesn't seem to work. I didn't\n      // investigate further for now.\n      // pars.format = LuminanceFormat;\n      // I would have this quarter size and use it as one of the ping-pong render\n      // targets but the aliasing causes some temporal flickering\n\n      postprocessing.rtTextureDepth = new THREE.WebGLRenderTarget(renderTargetWidth, renderTargetHeight, pars);\n      postprocessing.rtTextureDepthMask = new THREE.WebGLRenderTarget(renderTargetWidth, renderTargetHeight, pars); // The ping-pong render targets can use an adjusted resolution to minimize cost\n\n      var adjustedWidth = renderTargetWidth * godrayRenderTargetResolutionMultiplier;\n      var adjustedHeight = renderTargetHeight * godrayRenderTargetResolutionMultiplier;\n      postprocessing.rtTextureGodRays1 = new THREE.WebGLRenderTarget(adjustedWidth, adjustedHeight, pars);\n      postprocessing.rtTextureGodRays2 = new THREE.WebGLRenderTarget(adjustedWidth, adjustedHeight, pars); // god-ray shaders\n\n      var godraysMaskShader = GodRaysDepthMaskShader;\n      postprocessing.godrayMaskUniforms = THREE.UniformsUtils.clone(godraysMaskShader.uniforms);\n      postprocessing.materialGodraysDepthMask = new THREE.ShaderMaterial({\n        uniforms: postprocessing.godrayMaskUniforms,\n        vertexShader: godraysMaskShader.vertexShader,\n        fragmentShader: godraysMaskShader.fragmentShader\n      });\n      var godraysGenShader = GodRaysGenerateShader;\n      postprocessing.godrayGenUniforms = THREE.UniformsUtils.clone(godraysGenShader.uniforms);\n      postprocessing.materialGodraysGenerate = new THREE.ShaderMaterial({\n        uniforms: postprocessing.godrayGenUniforms,\n        vertexShader: godraysGenShader.vertexShader,\n        fragmentShader: godraysGenShader.fragmentShader\n      });\n      var godraysCombineShader = GodRaysCombineShader;\n      postprocessing.godrayCombineUniforms = THREE.UniformsUtils.clone(godraysCombineShader.uniforms);\n      postprocessing.materialGodraysCombine = new THREE.ShaderMaterial({\n        uniforms: postprocessing.godrayCombineUniforms,\n        vertexShader: godraysCombineShader.vertexShader,\n        fragmentShader: godraysCombineShader.fragmentShader\n      });\n      var godraysFakeSunShader = GodRaysFakeSunShader;\n      postprocessing.godraysFakeSunUniforms = THREE.UniformsUtils.clone(godraysFakeSunShader.uniforms);\n      postprocessing.materialGodraysFakeSun = new THREE.ShaderMaterial({\n        uniforms: postprocessing.godraysFakeSunUniforms,\n        vertexShader: godraysFakeSunShader.vertexShader,\n        fragmentShader: godraysFakeSunShader.fragmentShader\n      });\n      postprocessing.godraysFakeSunUniforms.bgColor.value.setHex(bgColor);\n      postprocessing.godraysFakeSunUniforms.sunColor.value.setHex(sunColor);\n      postprocessing.godrayCombineUniforms.fGodRayIntensity.value = 0.75;\n      postprocessing.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(1.0, 1.0), postprocessing.materialGodraysGenerate);\n      postprocessing.quad.position.z = -9900;\n      postprocessing.scene.add(postprocessing.quad);\n    }\n\n    function animate() {\n      requestAnimationFrame(animate, renderer.domElement);\n      render();\n    }\n\n    function getStepSize(filterLen, tapsPerPass, pass) {\n      return filterLen * Math.pow(tapsPerPass, -pass);\n    }\n\n    function filterGodRays(inputTex, renderTarget, stepSize) {\n      postprocessing.scene.overrideMaterial = postprocessing.materialGodraysGenerate;\n      postprocessing.godrayGenUniforms[\"fStepSize\"].value = stepSize;\n      postprocessing.godrayGenUniforms[\"tInput\"].value = inputTex;\n      renderer.setRenderTarget(renderTarget);\n      renderer.render(postprocessing.scene, postprocessing.camera);\n      postprocessing.scene.overrideMaterial = null;\n    }\n\n    function render() {\n      var time = Date.now() / 4000;\n      sphereMesh.position.x = orbitRadius * Math.cos(time);\n      sphereMesh.position.z = orbitRadius * Math.sin(time) - 100;\n      camera.position.x += (mouseX - camera.position.x) * 0.036;\n      camera.position.y += (-mouseY - camera.position.y) * 0.036;\n      camera.lookAt(scene.position);\n\n      if (postprocessing.enabled) {\n        // Find the screenspace position of the sun\n        screenSpacePosition.copy(sunPosition).project(camera);\n        screenSpacePosition.x = (screenSpacePosition.x + 1) / 2;\n        screenSpacePosition.y = (screenSpacePosition.y + 1) / 2; // Give it to the god-ray and sun shaders\n\n        postprocessing.godrayGenUniforms[\"vSunPositionScreenSpace\"].value.x = screenSpacePosition.x;\n        postprocessing.godrayGenUniforms[\"vSunPositionScreenSpace\"].value.y = screenSpacePosition.y;\n        postprocessing.godraysFakeSunUniforms[\"vSunPositionScreenSpace\"].value.x = screenSpacePosition.x;\n        postprocessing.godraysFakeSunUniforms[\"vSunPositionScreenSpace\"].value.y = screenSpacePosition.y; // -- Draw sky and sun --\n        // Clear colors and depths, will clear to sky color\n\n        renderer.setRenderTarget(postprocessing.rtTextureColors);\n        renderer.clear(true, true, false); // Sun render. Runs a shader that gives a brightness based on the screen\n        // space distance to the sun. Not very efficient, so i make a scissor\n        // rectangle around the suns position to avoid rendering surrounding pixels.\n\n        var sunsqH = 0.74 * window.innerHeight; // 0.74 depends on extent of sun from shader\n\n        var sunsqW = 0.74 * window.innerHeight; // both depend on height because sun is aspect-corrected\n\n        screenSpacePosition.x *= window.innerWidth;\n        screenSpacePosition.y *= window.innerHeight;\n        renderer.setScissor(screenSpacePosition.x - sunsqW / 2, screenSpacePosition.y - sunsqH / 2, sunsqW, sunsqH);\n        renderer.setScissorTest(true);\n        postprocessing.godraysFakeSunUniforms[\"fAspect\"].value = window.innerWidth / window.innerHeight;\n        postprocessing.scene.overrideMaterial = postprocessing.materialGodraysFakeSun;\n        renderer.setRenderTarget(postprocessing.rtTextureColors);\n        renderer.render(postprocessing.scene, postprocessing.camera);\n        renderer.setScissorTest(false); // -- Draw scene objects --\n        // Colors\n\n        scene.overrideMaterial = null;\n        renderer.setRenderTarget(postprocessing.rtTextureColors);\n        renderer.render(scene, camera); // Depth\n\n        scene.overrideMaterial = materialDepth;\n        renderer.setRenderTarget(postprocessing.rtTextureDepth);\n        renderer.clear();\n        renderer.render(scene, camera); //\n\n        postprocessing.godrayMaskUniforms[\"tInput\"].value = postprocessing.rtTextureDepth.texture;\n        postprocessing.scene.overrideMaterial = postprocessing.materialGodraysDepthMask;\n        renderer.setRenderTarget(postprocessing.rtTextureDepthMask);\n        renderer.render(postprocessing.scene, postprocessing.camera); // -- Render god-rays --\n        // Maximum length of god-rays (in texture space [0,1]X[0,1])\n\n        var filterLen = 1.0; // Samples taken by filter\n\n        var TAPS_PER_PASS = 6.0; // Pass order could equivalently be 3,2,1 (instead of 1,2,3), which\n        // would start with a small filter support and grow to large. however\n        // the large-to-small order produces less objectionable aliasing artifacts that\n        // appear as a glimmer along the length of the beams\n        // pass 1 - render into first ping-pong target\n\n        filterGodRays(postprocessing.rtTextureDepthMask.texture, postprocessing.rtTextureGodRays2, getStepSize(filterLen, TAPS_PER_PASS, 1.0)); // pass 2 - render into second ping-pong target\n\n        filterGodRays(postprocessing.rtTextureGodRays2.texture, postprocessing.rtTextureGodRays1, getStepSize(filterLen, TAPS_PER_PASS, 2.0)); // pass 3 - 1st RT\n\n        filterGodRays(postprocessing.rtTextureGodRays1.texture, postprocessing.rtTextureGodRays2, getStepSize(filterLen, TAPS_PER_PASS, 3.0)); // final pass - composite god-rays onto colors\n\n        postprocessing.godrayCombineUniforms[\"tColors\"].value = postprocessing.rtTextureColors.texture;\n        postprocessing.godrayCombineUniforms[\"tGodRays\"].value = postprocessing.rtTextureGodRays2.texture;\n        postprocessing.scene.overrideMaterial = postprocessing.materialGodraysCombine;\n        renderer.setRenderTarget(null);\n        renderer.render(postprocessing.scene, postprocessing.camera);\n        postprocessing.scene.overrideMaterial = null;\n      } else {\n        renderer.setRenderTarget(null);\n        renderer.clear();\n        renderer.render(scene, camera);\n      }\n    }\n  }, [ref]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"Channel-Div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256\n    },\n    __self: this\n  }, props.channel), React.createElement(\"div\", {\n    ref: ref,\n    id: \"info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/lambda_school_loaner_126/Desktop/CMT-FE/src/Components/ThreeEffects/CreepyLight/CreepyLightText.js"],"names":["React","useEffect","useRef","THREE","OBJLoader","GodRaysFakeSunShader","GodRaysDepthMaskShader","GodRaysCombineShader","GodRaysGenerateShader","fontJSON","CreepyLightText","props","ref","container","stats","camera","scene","renderer","materialDepth","sphereMesh","textvar","text","sunPosition","Vector3","screenSpacePosition","mouseX","mouseY","postprocessing","enabled","orbitRadius","bgColor","sunColor","godrayRenderTargetResolutionMultiplier","init","animate","document","createElement","body","appendChild","PerspectiveCamera","window","innerWidth","innerHeight","position","z","Scene","MeshDepthMaterial","materialScene","MeshBasicMaterial","color","loader","FontLoader","font","parse","geometry","TextGeometry","size","height","material","bevelThickness","extrudeMaterial","MeshPhongMaterial","flatShading","mesh","Mesh","add","geo","SphereBufferGeometry","scale","multiplyScalar","WebGLRenderer","setClearColor","setPixelRatio","devicePixelRatio","setSize","domElement","autoClear","addEventListener","onDocumentMouseMove","onDocumentTouchStart","onDocumentTouchMove","onWindowResize","initPostprocessing","event","clientX","clientY","touches","length","preventDefault","pageX","pageY","renderTargetWidth","renderTargetHeight","aspect","updateProjectionMatrix","rtTextureColors","rtTextureDepth","rtTextureDepthMask","adjustedWidth","adjustedHeight","rtTextureGodRays1","rtTextureGodRays2","OrthographicCamera","pars","minFilter","LinearFilter","magFilter","format","RGBFormat","WebGLRenderTarget","godraysMaskShader","godrayMaskUniforms","UniformsUtils","clone","uniforms","materialGodraysDepthMask","ShaderMaterial","vertexShader","fragmentShader","godraysGenShader","godrayGenUniforms","materialGodraysGenerate","godraysCombineShader","godrayCombineUniforms","materialGodraysCombine","godraysFakeSunShader","godraysFakeSunUniforms","materialGodraysFakeSun","value","setHex","fGodRayIntensity","quad","PlaneBufferGeometry","requestAnimationFrame","render","getStepSize","filterLen","tapsPerPass","pass","Math","pow","filterGodRays","inputTex","renderTarget","stepSize","overrideMaterial","setRenderTarget","time","Date","now","x","cos","sin","y","lookAt","copy","project","clear","sunsqH","sunsqW","setScissor","setScissorTest","texture","TAPS_PER_PASS","channel"],"mappings":"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","sourcesContent":["import React,{useEffect,useRef} from 'react'\nimport * as THREE from 'three';\n\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\nimport { GodRaysFakeSunShader, GodRaysDepthMaskShader, GodRaysCombineShader, GodRaysGenerateShader } from 'three/examples/jsm/shaders/GodRaysShader.js';\nimport fontJSON from '../fonts/fontJSON.json'\nimport \"./CreepyLight.css\"\n//Got Geometry from docs\nexport default function CreepyLightText(props) {\nconst ref = useRef()\nuseEffect(() => {\n\n    var container, stats;\n    var camera, scene, renderer, materialDepth;\n    var sphereMesh;\n    var textvar = props.text\n    var sunPosition = new THREE.Vector3( 0, 1000, - 1000 );\n    var screenSpacePosition = new THREE.Vector3();\n    var mouseX = 0, mouseY = 0;\n    var postprocessing = { enabled: true };\n    var orbitRadius = 200;\n    var bgColor = 0x000511;\n    var sunColor = 0xffee00;\n    // Use a smaller size for some of the god-ray render targets for better performance.\n    var godrayRenderTargetResolutionMultiplier = 1.0 / 4.0;\n    init();\n    animate();\n    function init() {\n        container = document.createElement( 'div' );\n        document.body.appendChild( container );\n        //\n        camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 3000 );\n        camera.position.z = 200;\n        scene = new THREE.Scene();\n        //\n        materialDepth = new THREE.MeshDepthMaterial();\n        var materialScene = new THREE.MeshBasicMaterial( { color: 0x000000 } );\n        // text\n        var loader = new THREE.FontLoader();\n        var font =loader.parse(fontJSON)\n        var geometry = new THREE.TextGeometry(textvar,{font:font, size: 160, height: 10, material: 0, bevelThickness: 1, extrudeMaterial:10})\n        var material = new THREE.MeshPhongMaterial( { color: 0xffffff, flatShading: true } );\n        var mesh = new THREE.Mesh(geometry,material)\n        scene.add(mesh)\n        // sphere\n        var geo = new THREE.SphereBufferGeometry( 1, 20, 10 );\n        sphereMesh = new THREE.Mesh( geo, materialScene );\n        sphereMesh.scale.multiplyScalar( 20 );\n        scene.add( sphereMesh );\n        //\n        renderer = new THREE.WebGLRenderer();\n        renderer.setClearColor( 0xffffff );\n        renderer.setPixelRatio( window.devicePixelRatio );\n        renderer.setSize( window.innerWidth, window.innerHeight );\n        container.appendChild( renderer.domElement );\n        renderer.autoClear = false;\n        //\n\n        document.addEventListener( 'mousemove', onDocumentMouseMove, false );\n        document.addEventListener( 'touchstart', onDocumentTouchStart, false );\n        document.addEventListener( 'touchmove', onDocumentTouchMove, false );\n        window.addEventListener( 'resize', onWindowResize, false );\n        //\n        initPostprocessing( window.innerWidth, window.innerHeight );\n    }\n    //\n    function onDocumentMouseMove( event ) {\n        mouseX = event.clientX - window.innerWidth / 2;\n        mouseY = event.clientY - window.innerHeight / 2;\n    }\n    function onDocumentTouchStart( event ) {\n        if ( event.touches.length === 1 ) {\n            event.preventDefault();\n            mouseX = event.touches[ 0 ].pageX - window.innerWidth / 2;\n            mouseY = event.touches[ 0 ].pageY - window.innerHeight / 2;\n        }\n    }\n    function onDocumentTouchMove( event ) {\n        if ( event.touches.length === 1 ) {\n            event.preventDefault();\n            mouseX = event.touches[ 0 ].pageX - window.innerWidth / 2;\n            mouseY = event.touches[ 0 ].pageY - window.innerHeight / 2;\n        }\n    }\n    //\n    function onWindowResize() {\n        var renderTargetWidth = window.innerWidth;\n        var renderTargetHeight = window.innerHeight;\n        camera.aspect = renderTargetWidth / renderTargetHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize( renderTargetWidth, renderTargetHeight );\n        postprocessing.rtTextureColors.setSize( renderTargetWidth, renderTargetHeight );\n        postprocessing.rtTextureDepth.setSize( renderTargetWidth, renderTargetHeight );\n        postprocessing.rtTextureDepthMask.setSize( renderTargetWidth, renderTargetHeight );\n        var adjustedWidth = renderTargetWidth * godrayRenderTargetResolutionMultiplier;\n        var adjustedHeight = renderTargetHeight * godrayRenderTargetResolutionMultiplier;\n        postprocessing.rtTextureGodRays1.setSize( adjustedWidth, adjustedHeight );\n        postprocessing.rtTextureGodRays2.setSize( adjustedWidth, adjustedHeight );\n    }\n    function initPostprocessing( renderTargetWidth, renderTargetHeight ) {\n        postprocessing.scene = new THREE.Scene();\n        postprocessing.camera = new THREE.OrthographicCamera( - 0.5, 0.5, 0.5, - 0.5, - 10000, 10000 );\n        postprocessing.camera.position.z = 100;\n        postprocessing.scene.add( postprocessing.camera );\n        var pars = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat };\n        postprocessing.rtTextureColors = new THREE.WebGLRenderTarget( renderTargetWidth, renderTargetHeight, pars );\n        // Switching the depth formats to luminance from rgb doesn't seem to work. I didn't\n        // investigate further for now.\n        // pars.format = LuminanceFormat;\n        // I would have this quarter size and use it as one of the ping-pong render\n        // targets but the aliasing causes some temporal flickering\n        postprocessing.rtTextureDepth = new THREE.WebGLRenderTarget( renderTargetWidth, renderTargetHeight, pars );\n        postprocessing.rtTextureDepthMask = new THREE.WebGLRenderTarget( renderTargetWidth, renderTargetHeight, pars );\n        // The ping-pong render targets can use an adjusted resolution to minimize cost\n        var adjustedWidth = renderTargetWidth * godrayRenderTargetResolutionMultiplier;\n        var adjustedHeight = renderTargetHeight * godrayRenderTargetResolutionMultiplier;\n        postprocessing.rtTextureGodRays1 = new THREE.WebGLRenderTarget( adjustedWidth, adjustedHeight, pars );\n        postprocessing.rtTextureGodRays2 = new THREE.WebGLRenderTarget( adjustedWidth, adjustedHeight, pars );\n        // god-ray shaders\n        var godraysMaskShader = GodRaysDepthMaskShader;\n        postprocessing.godrayMaskUniforms = THREE.UniformsUtils.clone( godraysMaskShader.uniforms );\n        postprocessing.materialGodraysDepthMask = new THREE.ShaderMaterial( {\n            uniforms: postprocessing.godrayMaskUniforms,\n            vertexShader: godraysMaskShader.vertexShader,\n            fragmentShader: godraysMaskShader.fragmentShader\n        } );\n        var godraysGenShader = GodRaysGenerateShader;\n        postprocessing.godrayGenUniforms = THREE.UniformsUtils.clone( godraysGenShader.uniforms );\n        postprocessing.materialGodraysGenerate = new THREE.ShaderMaterial( {\n            uniforms: postprocessing.godrayGenUniforms,\n            vertexShader: godraysGenShader.vertexShader,\n            fragmentShader: godraysGenShader.fragmentShader\n        } );\n        var godraysCombineShader = GodRaysCombineShader;\n        postprocessing.godrayCombineUniforms = THREE.UniformsUtils.clone( godraysCombineShader.uniforms );\n        postprocessing.materialGodraysCombine = new THREE.ShaderMaterial( {\n            uniforms: postprocessing.godrayCombineUniforms,\n            vertexShader: godraysCombineShader.vertexShader,\n            fragmentShader: godraysCombineShader.fragmentShader\n        } );\n        var godraysFakeSunShader = GodRaysFakeSunShader;\n        postprocessing.godraysFakeSunUniforms = THREE.UniformsUtils.clone( godraysFakeSunShader.uniforms );\n        postprocessing.materialGodraysFakeSun = new THREE.ShaderMaterial( {\n            uniforms: postprocessing.godraysFakeSunUniforms,\n            vertexShader: godraysFakeSunShader.vertexShader,\n            fragmentShader: godraysFakeSunShader.fragmentShader\n        } );\n        postprocessing.godraysFakeSunUniforms.bgColor.value.setHex( bgColor );\n        postprocessing.godraysFakeSunUniforms.sunColor.value.setHex( sunColor );\n        postprocessing.godrayCombineUniforms.fGodRayIntensity.value = 0.75;\n        postprocessing.quad = new THREE.Mesh(\n            new THREE.PlaneBufferGeometry( 1.0, 1.0 ),\n            postprocessing.materialGodraysGenerate\n        );\n        postprocessing.quad.position.z = - 9900;\n        postprocessing.scene.add( postprocessing.quad );\n    }\n    function animate() {\n        requestAnimationFrame( animate, renderer.domElement );\n\n        render();\n\n    }\n    function getStepSize( filterLen, tapsPerPass, pass ) {\n        return filterLen * Math.pow( tapsPerPass, - pass );\n    }\n    function filterGodRays( inputTex, renderTarget, stepSize ) {\n        postprocessing.scene.overrideMaterial = postprocessing.materialGodraysGenerate;\n        postprocessing.godrayGenUniforms[ \"fStepSize\" ].value = stepSize;\n        postprocessing.godrayGenUniforms[ \"tInput\" ].value = inputTex;\n        renderer.setRenderTarget( renderTarget );\n        renderer.render( postprocessing.scene, postprocessing.camera );\n        postprocessing.scene.overrideMaterial = null;\n    }\n    function render() {\n        var time = Date.now() / 4000;\n        sphereMesh.position.x = orbitRadius * Math.cos( time );\n        sphereMesh.position.z = orbitRadius * Math.sin( time ) - 100;\n        camera.position.x += ( mouseX - camera.position.x ) * 0.036;\n        camera.position.y += ( - ( mouseY ) - camera.position.y ) * 0.036;\n        camera.lookAt( scene.position );\n        if ( postprocessing.enabled ) {\n            // Find the screenspace position of the sun\n            screenSpacePosition.copy( sunPosition ).project( camera );\n            screenSpacePosition.x = ( screenSpacePosition.x + 1 ) / 2;\n            screenSpacePosition.y = ( screenSpacePosition.y + 1 ) / 2;\n            // Give it to the god-ray and sun shaders\n            postprocessing.godrayGenUniforms[ \"vSunPositionScreenSpace\" ].value.x = screenSpacePosition.x;\n            postprocessing.godrayGenUniforms[ \"vSunPositionScreenSpace\" ].value.y = screenSpacePosition.y;\n            postprocessing.godraysFakeSunUniforms[ \"vSunPositionScreenSpace\" ].value.x = screenSpacePosition.x;\n            postprocessing.godraysFakeSunUniforms[ \"vSunPositionScreenSpace\" ].value.y = screenSpacePosition.y;\n            // -- Draw sky and sun --\n            // Clear colors and depths, will clear to sky color\n            renderer.setRenderTarget( postprocessing.rtTextureColors );\n            renderer.clear( true, true, false );\n            // Sun render. Runs a shader that gives a brightness based on the screen\n            // space distance to the sun. Not very efficient, so i make a scissor\n            // rectangle around the suns position to avoid rendering surrounding pixels.\n            var sunsqH = 0.74 * window.innerHeight; // 0.74 depends on extent of sun from shader\n            var sunsqW = 0.74 * window.innerHeight; // both depend on height because sun is aspect-corrected\n            screenSpacePosition.x *= window.innerWidth;\n            screenSpacePosition.y *= window.innerHeight;\n            renderer.setScissor( screenSpacePosition.x - sunsqW / 2, screenSpacePosition.y - sunsqH / 2, sunsqW, sunsqH );\n            renderer.setScissorTest( true );\n            postprocessing.godraysFakeSunUniforms[ \"fAspect\" ].value = window.innerWidth / window.innerHeight;\n            postprocessing.scene.overrideMaterial = postprocessing.materialGodraysFakeSun;\n            renderer.setRenderTarget( postprocessing.rtTextureColors );\n            renderer.render( postprocessing.scene, postprocessing.camera );\n            renderer.setScissorTest( false );\n            // -- Draw scene objects --\n            // Colors\n            scene.overrideMaterial = null;\n            renderer.setRenderTarget( postprocessing.rtTextureColors );\n            renderer.render( scene, camera );\n            // Depth\n            scene.overrideMaterial = materialDepth;\n            renderer.setRenderTarget( postprocessing.rtTextureDepth );\n            renderer.clear();\n            renderer.render( scene, camera );\n            //\n            postprocessing.godrayMaskUniforms[ \"tInput\" ].value = postprocessing.rtTextureDepth.texture;\n            postprocessing.scene.overrideMaterial = postprocessing.materialGodraysDepthMask;\n            renderer.setRenderTarget( postprocessing.rtTextureDepthMask );\n            renderer.render( postprocessing.scene, postprocessing.camera );\n            // -- Render god-rays --\n            // Maximum length of god-rays (in texture space [0,1]X[0,1])\n            var filterLen = 1.0;\n            // Samples taken by filter\n            var TAPS_PER_PASS = 6.0;\n            // Pass order could equivalently be 3,2,1 (instead of 1,2,3), which\n            // would start with a small filter support and grow to large. however\n            // the large-to-small order produces less objectionable aliasing artifacts that\n            // appear as a glimmer along the length of the beams\n            // pass 1 - render into first ping-pong target\n            filterGodRays( postprocessing.rtTextureDepthMask.texture, postprocessing.rtTextureGodRays2, getStepSize( filterLen, TAPS_PER_PASS, 1.0 ) );\n            // pass 2 - render into second ping-pong target\n            filterGodRays( postprocessing.rtTextureGodRays2.texture, postprocessing.rtTextureGodRays1, getStepSize( filterLen, TAPS_PER_PASS, 2.0 ) );\n            // pass 3 - 1st RT\n            filterGodRays( postprocessing.rtTextureGodRays1.texture, postprocessing.rtTextureGodRays2, getStepSize( filterLen, TAPS_PER_PASS, 3.0 ) );\n            // final pass - composite god-rays onto colors\n            postprocessing.godrayCombineUniforms[ \"tColors\" ].value = postprocessing.rtTextureColors.texture;\n            postprocessing.godrayCombineUniforms[ \"tGodRays\" ].value = postprocessing.rtTextureGodRays2.texture;\n            postprocessing.scene.overrideMaterial = postprocessing.materialGodraysCombine;\n            renderer.setRenderTarget( null );\n            renderer.render( postprocessing.scene, postprocessing.camera );\n            postprocessing.scene.overrideMaterial = null;\n        } else {\n            renderer.setRenderTarget( null );\n            renderer.clear();\n            renderer.render( scene, camera );\n        }\n    }\n}, [ref])\nreturn (\n    <div>\n<div id = \"Channel-Div\">{props.channel}</div>\n        <div ref= {ref} id=\"info\">\n    \n        </div>      \n    </div>\n)\n}\n"]},"metadata":{},"sourceType":"module"}