{"ast":null,"code":"var _jsxFileName = \"/Users/lambda_school_loaner_126/Desktop/CMT-FE/src/Components/ThreeEffects/DefaultGlitch/DefaultClass.js\";\nimport React, { Component } from 'react'; // import React,{useEffect,useRef} from 'react'\n\nimport * as THREE from 'three';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { GlitchPass } from 'three/examples/jsm/postprocessing/GlitchPass.js';\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport \"./Glitch.css\";\nimport { isInterfaceDeclaration } from '@babel/types'; // export default function DefaultGlitch(props) {\n//     const GlitchRef = useRef()\n//     useEffect(() => {\n// //==================THREEJS Stuff===================//\n// var camera, scene, renderer, composer;\n// var object, light;\n// var glitchPass;\n// init();\n// animate();\n// function updateOptions() {\n//     var wildGlitch = document.getElementById( 'wildGlitch' );\n//     glitchPass.goWild = wildGlitch.checked;\n// }\n// function init() {\n//     renderer = new THREE.WebGLRenderer();\n//     renderer.setPixelRatio( window.devicePixelRatio );\n//     renderer.setSize( window.innerWidth, window.innerHeight );\n//     document.body.appendChild( renderer.domElement );\n//     //\n//     camera = new THREE.PerspectiveCamera( 150, window.innerWidth / window.innerHeight, 1, 1000 );\n//     camera.position.z = 400;\n//     scene = new THREE.Scene();\n//     scene.fog = new THREE.Fog( 0x000000, 1, 1000 );\n//     object = new THREE.Object3D();\n//     scene.add( object );\n//     let loader = new THREE.TextureLoader();\n//     const bgTexture = loader.load(props.background);\n//     scene.background = bgTexture;\n//     //===============Light ====================//\n//     scene.add( new THREE.AmbientLight( 0x222222 ) );\n//     light = new THREE.DirectionalLight( 0xffffff );\n//     light.position.set( 1, 1, 1 );\n//     scene.add( light );\n//     // postprocessing\n//     composer = new EffectComposer( renderer );\n//     composer.addPass( new RenderPass( scene, camera ) );\n//     glitchPass = new GlitchPass();\n//     composer.addPass( glitchPass );\n//     //\n//     window.addEventListener( 'resize', onWindowResize, false );\n//     var wildGlitchOption = document.getElementById( 'wildGlitch' );\n//     wildGlitchOption.addEventListener( 'change', updateOptions );\n//     updateOptions();\n// }\n// function onWindowResize() {\n//     camera.aspect = window.innerWidth / window.innerHeight;\n//     camera.updateProjectionMatrix();\n//     renderer.setSize( window.innerWidth, window.innerHeight );\n//     composer.setSize( window.innerWidth, window.innerHeight );\n// }\n// function animate() {\n//     requestAnimationFrame( animate );\n//     composer.render();\n// }\n//     }, [GlitchRef])\n//     return (\n//         <div>\n// <div id = \"Channel-Div\">{props.channel}</div>\n//             <div ref={GlitchRef} id =\"wildGlitch\"></div>\n//         </div>\n//     )\n// }\n\nexport default class DefaultClass extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.start = () => {\n      if (!this.frameId) {\n        this.frameId = requestAnimationFrame(this.animate);\n      }\n    };\n\n    this.stop = () => {\n      cancelAnimationFrame(this.frameId);\n    };\n\n    this.animate = () => {\n      this.renderScene();\n      this.frameId = window.requestAnimationFrame(this.animate);\n    };\n\n    this.renderScene = () => {\n      this.renderer.render(this.scene, this.camera);\n    };\n  }\n\n  componentDidMount() {\n    const background = \"https://raw.githubusercontent.com/CMT-9442V/CMT-FE/master/src/Components/assets/images/nosignal8.jpg\"; // this.init()\n    // this.animate()\n\n    function updateOptions() {\n      var wildGlitch = document.getElementById('wildGlitch');\n      this.glitchPass.goWild = wildGlitch.checked;\n    }\n\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight; //  const init =() =>{\n    //============Renderer=======================//\n\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(this.renderer.domElement);\n    this.mount.appendChild(this.renderer.domElement); //==============Camera and Scene==================//\n\n    this.camera = new THREE.PerspectiveCamera(150, window.innerWidth / window.innerHeight, 1, 1000);\n    this.camera.position.z = 400;\n    this.scene = new THREE.Scene();\n    this.scene.fog = new THREE.Fog(0x000000, 1, 1000);\n    this.object = new THREE.Object3D();\n    this.scene.add(this.object); //===============Background =====================//\n\n    let loader = new THREE.TextureLoader();\n    const bgTexture = loader.load(background);\n    this.scene.background = bgTexture; //===============Light===========================//\n\n    this.scene.add(new THREE.AmbientLight(0x222222));\n    this.light = new THREE.DirectionalLight(0xffffff);\n    this.light.position.set(1, 1, 1);\n    this.scene.add(this.light); //==============Postprocessing=====================//\n\n    this.composer = new EffectComposer(this.renderer);\n    this.composer.addPass(new RenderPass(this.scene, this.camera));\n    this.glitchPass = new GlitchPass();\n    this.composer.addPass(this.glitchPass); //============Listeners===========================//\n\n    window.addEventListener('resize', this.onWindowResize, false);\n    var wildGlitchOption = document.getElementById('wildGlitch');\n    wildGlitchOption.addEventListener('change', updateOptions);\n    updateOptions(); // }\n    //ADD SCENE\n    // this.scene = new THREE.Scene()\n    //ADD CAMERA\n    // this.camera = new THREE.PerspectiveCamera(\n    //   75,\n    //   width / height,\n    //   0.1,\n    //   1000\n    // )\n    // this.camera.position.z = 4\n    //ADD RENDERER\n    // this.renderer = new THREE.WebGLRenderer({ antialias: true })\n    // this.renderer.setClearColor('#000000')\n    // this.renderer.setSize(width, height)\n    // this.mount.appendChild(this.renderer.domElement)\n    //ADD CUBE\n    // const geometry = new THREE.BoxGeometry(1, 1, 1)\n    // const material = new THREE.MeshBasicMaterial({ color: '#FFF'     })\n    // this.cube = new THREE.Mesh(geometry, material)\n    // this.scene.add(this.cube)\n\n    this.start();\n  }\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        width: '100vh',\n        height: '100vh'\n      },\n      ref: mount => {\n        this.mount = mount;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/lambda_school_loaner_126/Desktop/CMT-FE/src/Components/ThreeEffects/DefaultGlitch/DefaultClass.js"],"names":["React","Component","THREE","EffectComposer","RenderPass","GlitchPass","BufferGeometryUtils","isInterfaceDeclaration","DefaultClass","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","renderScene","window","renderer","render","scene","camera","componentDidMount","background","updateOptions","wildGlitch","document","getElementById","glitchPass","goWild","checked","width","mount","clientWidth","height","clientHeight","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","innerWidth","innerHeight","body","appendChild","domElement","PerspectiveCamera","position","z","Scene","fog","Fog","object","Object3D","add","loader","TextureLoader","bgTexture","load","AmbientLight","light","DirectionalLight","set","composer","addPass","addEventListener","onWindowResize","wildGlitchOption","componentWillUnmount","removeChild"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n// import React,{useEffect,useRef} from 'react'\nimport * as THREE from 'three'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js'\nimport {RenderPass} from 'three/examples/jsm/postprocessing/RenderPass.js'\nimport {GlitchPass} from 'three/examples/jsm/postprocessing/GlitchPass.js'\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport \"./Glitch.css\"\nimport { isInterfaceDeclaration } from '@babel/types'\n\n// export default function DefaultGlitch(props) {\n//     const GlitchRef = useRef()\n//     useEffect(() => {\n// //==================THREEJS Stuff===================//\n// var camera, scene, renderer, composer;\n// var object, light;\n// var glitchPass;\n\n// init();\n// animate();\n// function updateOptions() {\n//     var wildGlitch = document.getElementById( 'wildGlitch' );\n//     glitchPass.goWild = wildGlitch.checked;\n// }\n// function init() {\n//     renderer = new THREE.WebGLRenderer();\n//     renderer.setPixelRatio( window.devicePixelRatio );\n//     renderer.setSize( window.innerWidth, window.innerHeight );\n//     document.body.appendChild( renderer.domElement );\n//     //\n//     camera = new THREE.PerspectiveCamera( 150, window.innerWidth / window.innerHeight, 1, 1000 );\n//     camera.position.z = 400;\n//     scene = new THREE.Scene();\n//     scene.fog = new THREE.Fog( 0x000000, 1, 1000 );\n//     object = new THREE.Object3D();\n//     scene.add( object );\n\n\n\n//     let loader = new THREE.TextureLoader();\n//     const bgTexture = loader.load(props.background);\n//     scene.background = bgTexture;\n//     //===============Light ====================//\n//     scene.add( new THREE.AmbientLight( 0x222222 ) );\n//     light = new THREE.DirectionalLight( 0xffffff );\n//     light.position.set( 1, 1, 1 );\n//     scene.add( light );\n//     // postprocessing\n//     composer = new EffectComposer( renderer );\n//     composer.addPass( new RenderPass( scene, camera ) );\n//     glitchPass = new GlitchPass();\n//     composer.addPass( glitchPass );\n//     //\n//     window.addEventListener( 'resize', onWindowResize, false );\n//     var wildGlitchOption = document.getElementById( 'wildGlitch' );\n//     wildGlitchOption.addEventListener( 'change', updateOptions );\n//     updateOptions();\n// }\n// function onWindowResize() {\n//     camera.aspect = window.innerWidth / window.innerHeight;\n//     camera.updateProjectionMatrix();\n//     renderer.setSize( window.innerWidth, window.innerHeight );\n//     composer.setSize( window.innerWidth, window.innerHeight );\n// }\n// function animate() {\n//     requestAnimationFrame( animate );\n//     composer.render();\n// }\n//     }, [GlitchRef])\n//     return (\n//         <div>\n// <div id = \"Channel-Div\">{props.channel}</div>\n//             <div ref={GlitchRef} id =\"wildGlitch\"></div>\n//         </div>\n//     )\n// }\n\nexport default class DefaultClass extends Component {\n    componentDidMount(){\n        const background = \"https://raw.githubusercontent.com/CMT-9442V/CMT-FE/master/src/Components/assets/images/nosignal8.jpg\"\n        // this.init()\n        // this.animate()\n             function updateOptions() {\n                var wildGlitch = document.getElementById( 'wildGlitch' );\n                this.glitchPass.goWild = wildGlitch.checked;\n            }\n        const width = this.mount.clientWidth\n        const height = this.mount.clientHeight\n    //  const init =() =>{\n         //============Renderer=======================//\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setPixelRatio( window.devicePixelRatio );\n    this.renderer.setSize( window.innerWidth, window.innerHeight );\n    document.body.appendChild( this.renderer.domElement );\n    this.mount.appendChild(this.renderer.domElement)\n//==============Camera and Scene==================//\n    this.camera = new THREE.PerspectiveCamera( 150, window.innerWidth / window.innerHeight, 1, 1000 );\n    this.camera.position.z = 400;\n    this.scene = new THREE.Scene();\n    this.scene.fog = new THREE.Fog( 0x000000, 1, 1000 );\n    this.object = new THREE.Object3D();\n    this.scene.add( this.object );\n//===============Background =====================//\n    let loader = new THREE.TextureLoader();\n    const bgTexture = loader.load(background);\n    this.scene.background = bgTexture;\n//===============Light===========================//\n    this.scene.add( new THREE.AmbientLight( 0x222222 ) );\n    this.light = new THREE.DirectionalLight( 0xffffff );\n    this.light.position.set( 1, 1, 1 );\n    this.scene.add( this.light );\n//==============Postprocessing=====================//\n    this.composer = new EffectComposer( this.renderer );\n    this.composer.addPass( new RenderPass( this.scene, this.camera ) );\n    this.glitchPass = new GlitchPass();\n    this.composer.addPass( this.glitchPass );\n//============Listeners===========================//\n    window.addEventListener( 'resize', this.onWindowResize, false );\n    var wildGlitchOption = document.getElementById( 'wildGlitch' );\n    wildGlitchOption.addEventListener( 'change', updateOptions );\n    updateOptions();\n\n        // }\n        //ADD SCENE\n        // this.scene = new THREE.Scene()\n        //ADD CAMERA\n        // this.camera = new THREE.PerspectiveCamera(\n        //   75,\n        //   width / height,\n        //   0.1,\n        //   1000\n        // )\n        // this.camera.position.z = 4\n        //ADD RENDERER\n        // this.renderer = new THREE.WebGLRenderer({ antialias: true })\n        // this.renderer.setClearColor('#000000')\n        // this.renderer.setSize(width, height)\n        // this.mount.appendChild(this.renderer.domElement)\n        //ADD CUBE\n        // const geometry = new THREE.BoxGeometry(1, 1, 1)\n        // const material = new THREE.MeshBasicMaterial({ color: '#FFF'     })\n        // this.cube = new THREE.Mesh(geometry, material)\n        // this.scene.add(this.cube)\n    this.start()\n\n\n      }\n    componentWillUnmount(){\n        this.stop()\n        this.mount.removeChild(this.renderer.domElement)\n      }\n    start = () => {\n        if (!this.frameId) {\n          this.frameId = requestAnimationFrame(this.animate)\n        }\n      }\n    stop = () => {\n        cancelAnimationFrame(this.frameId)\n      }\n    animate = () => {\n\n       this.renderScene()\n       this.frameId = window.requestAnimationFrame(this.animate)\n     }\n    renderScene = () => {\n      this.renderer.render(this.scene, this.camera)\n    }\n    render(){\n        return(\n          <div\n            style={{ width: '100vh', height: '100vh' }}\n            ref={(mount) => { this.mount = mount }}\n          />\n        )\n      }\n    }\n"]},"metadata":{},"sourceType":"module"}