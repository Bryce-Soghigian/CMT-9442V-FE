{"ast":null,"code":"var _jsxFileName = \"/Users/lambda_school_loaner_126/Desktop/CMT-FE/src/Components/ThreeEffects/DefaultGlitch/DefaultGlitch.js\";\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { GlitchPass } from 'three/examples/jsm/postprocessing/GlitchPass.js';\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport \"./Glitch.css\";\nimport Sound from 'react-sound';\nimport ns3 from '../../assets/audio/ns3.wav';\nimport ns2 from '../../assets/audio/ns2.mp3';\nimport ns1 from '../../assets/audio/ns1.mp3';\nimport tv_static from '../../assets/audio/tv_static.mp3';\nimport radio_static from '../../assets/audio/radio_static.mp3';\nimport flatwoods from '../../assets/audio/flatwoods.mp3';\nimport glitched_tones from '../../assets/audio/glitched_tones.mp3';\nexport default function DefaultGlitch(props) {\n  const GlitchRef = useRef();\n  useEffect(() => {\n    //==================THREEJS Stuff===================//\n    var camera, scene, renderer, composer;\n    var object, light;\n    var glitchPass; // let background = props.background.toString()\n    // console.log(typeof props.background)\n\n    init();\n    animate();\n\n    function updateOptions() {\n      var wildGlitch = document.getElementById('wildGlitch');\n      glitchPass.goWild = wildGlitch.checked;\n    }\n\n    function init() {\n      renderer = new THREE.WebGLRenderer();\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      document.body.appendChild(renderer.domElement); //\n\n      camera = new THREE.PerspectiveCamera(150, window.innerWidth / window.innerHeight, 1, 1000);\n      camera.position.z = 400;\n      scene = new THREE.Scene();\n      scene.fog = new THREE.Fog(0x000000, 1, 1000);\n      object = new THREE.Object3D();\n      scene.add(object); //============Box Geometry=================//\n\n      function generateGeometry(objectType, numObjects) {\n        function applyVertexColors(geometry, color) {\n          var position = geometry.attributes.position;\n          var colors = [];\n\n          for (var i = 0; i < position.count; i++) {\n            colors.push(color.r, color.g, color.b);\n          }\n\n          geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\n        }\n\n        var geometries = [];\n        var matrix = new THREE.Matrix4();\n        var position = new THREE.Vector3();\n        var rotation = new THREE.Euler();\n        var quaternion = new THREE.Quaternion();\n        var scale = new THREE.Vector3();\n        var color = new THREE.Color();\n\n        for (var i = 0; i < numObjects; i++) {\n          position.x = Math.random() * 10000 - 5000;\n          position.y = Math.random() * 6000 - 3000;\n          position.z = Math.random() * 8000 - 4000;\n          rotation.x = Math.random() * 2 * Math.PI;\n          rotation.y = Math.random() * 2 * Math.PI;\n          rotation.z = Math.random() * 2 * Math.PI;\n          quaternion.setFromEuler(rotation);\n          scale.x = Math.random() * 200 + 100;\n          var geometry;\n\n          if (objectType === 'cube') {\n            geometry = new THREE.BoxBufferGeometry(1, 1, 1);\n            geometry = geometry.toNonIndexed(); // merging needs consistent buffer geometries\n\n            scale.y = Math.random() * 200 + 100;\n            scale.z = Math.random() * 200 + 100;\n            color.setRGB(0, 0, 0.1 + 0.9 * Math.random());\n          } else if (objectType === 'sphere') {\n            geometry = new THREE.IcosahedronBufferGeometry(1, 1);\n            scale.y = scale.z = scale.x;\n            color.setRGB(0.1 + 0.9 * Math.random(), 0, 0);\n          } // give the geom's vertices a random color, to be displayed\n\n\n          applyVertexColors(geometry, color);\n          matrix.compose(position, quaternion, scale);\n          geometry.applyMatrix(matrix);\n          geometries.push(geometry);\n        }\n\n        return BufferGeometryUtils.mergeBufferGeometries(geometries);\n      }\n\n      let loader = new THREE.TextureLoader();\n      const bgTexture = loader.load(props.background);\n      scene.background = bgTexture; //===============Light ====================//\n\n      scene.add(new THREE.AmbientLight(0x222222));\n      light = new THREE.DirectionalLight(0xffffff);\n      light.position.set(1, 1, 1);\n      scene.add(light); // postprocessing\n\n      composer = new EffectComposer(renderer);\n      composer.addPass(new RenderPass(scene, camera));\n      glitchPass = new GlitchPass();\n      composer.addPass(glitchPass); //\n\n      window.addEventListener('resize', onWindowResize, false);\n      var wildGlitchOption = document.getElementById('wildGlitch');\n      wildGlitchOption.addEventListener('change', updateOptions);\n      updateOptions();\n    }\n\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      composer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    function animate() {\n      requestAnimationFrame(animate);\n      composer.render();\n    }\n\n    return () => {\n      document.body.removeChild(renderer.domElement);\n    };\n  }, [GlitchRef]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"Channel-Div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, props.channel), React.createElement(\"div\", {\n    ref: GlitchRef,\n    id: \"wildGlitch\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, props.audio === \"tv_static\" ? React.createElement(Sound, {\n    url: tv_static,\n    playStatus: Sound.status.PLAYING,\n    loop: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }) : props.audio === \"radio_static\" ? React.createElement(Sound, {\n    url: radio_static,\n    playStatus: Sound.status.PLAYING,\n    loop: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }) : props.audio === \"glitched_tones\" ? React.createElement(Sound, {\n    url: glitched_tones,\n    playStatus: Sound.status.PLAYING,\n    loop: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }) : props.audio === \"flatwoods\" ? React.createElement(Sound, {\n    url: flatwoods,\n    playStatus: Sound.status.PLAYING,\n    loop: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }) : props.audio === \"ns1\" ? React.createElement(Sound, {\n    url: ns1,\n    playStatus: Sound.status.PLAYING,\n    loop: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }) : props.audio === \"ns2\" ? React.createElement(Sound, {\n    url: ns2,\n    playStatus: Sound.status.PLAYING,\n    loop: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }) : props.audio === \"ns3\" ? React.createElement(Sound, {\n    url: ns3,\n    playStatus: Sound.status.PLAYING,\n    loop: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }) : null));\n}","map":{"version":3,"sources":["/Users/lambda_school_loaner_126/Desktop/CMT-FE/src/Components/ThreeEffects/DefaultGlitch/DefaultGlitch.js"],"names":["React","useEffect","useRef","THREE","EffectComposer","RenderPass","GlitchPass","BufferGeometryUtils","Sound","ns3","ns2","ns1","tv_static","radio_static","flatwoods","glitched_tones","DefaultGlitch","props","GlitchRef","camera","scene","renderer","composer","object","light","glitchPass","init","animate","updateOptions","wildGlitch","document","getElementById","goWild","checked","WebGLRenderer","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","body","appendChild","domElement","PerspectiveCamera","position","z","Scene","fog","Fog","Object3D","add","generateGeometry","objectType","numObjects","applyVertexColors","geometry","color","attributes","colors","i","count","push","r","g","b","setAttribute","Float32BufferAttribute","geometries","matrix","Matrix4","Vector3","rotation","Euler","quaternion","Quaternion","scale","Color","x","Math","random","y","PI","setFromEuler","BoxBufferGeometry","toNonIndexed","setRGB","IcosahedronBufferGeometry","compose","applyMatrix","mergeBufferGeometries","loader","TextureLoader","bgTexture","load","background","AmbientLight","DirectionalLight","set","addPass","addEventListener","onWindowResize","wildGlitchOption","aspect","updateProjectionMatrix","requestAnimationFrame","render","removeChild","channel","audio","status","PLAYING"],"mappings":"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","sourcesContent":["import React,{useEffect,useRef} from 'react'\nimport * as THREE from 'three'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js'\nimport {RenderPass} from 'three/examples/jsm/postprocessing/RenderPass.js'\nimport {GlitchPass} from 'three/examples/jsm/postprocessing/GlitchPass.js'\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport \"./Glitch.css\"\nimport Sound from 'react-sound'\nimport ns3 from '../../assets/audio/ns3.wav'\nimport ns2 from '../../assets/audio/ns2.mp3'\nimport ns1 from '../../assets/audio/ns1.mp3'\nimport tv_static from '../../assets/audio/tv_static.mp3'\nimport radio_static from '../../assets/audio/radio_static.mp3'\nimport flatwoods from '../../assets/audio/flatwoods.mp3'\nimport glitched_tones from '../../assets/audio/glitched_tones.mp3'\n\nexport default function DefaultGlitch(props) {\n    const GlitchRef = useRef()\n    useEffect(() => {\n//==================THREEJS Stuff===================//\nvar camera, scene, renderer, composer;\nvar object, light;\nvar glitchPass;\n// let background = props.background.toString()\n// console.log(typeof props.background)\n\ninit();\nanimate();\nfunction updateOptions() {\n    var wildGlitch = document.getElementById( 'wildGlitch' );\n    glitchPass.goWild = wildGlitch.checked;\n}\nfunction init() {\n    renderer = new THREE.WebGLRenderer();\n    renderer.setPixelRatio( window.devicePixelRatio );\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    document.body.appendChild( renderer.domElement );\n    //\n    camera = new THREE.PerspectiveCamera( 150, window.innerWidth / window.innerHeight, 1, 1000 );\n    camera.position.z = 400;\n    scene = new THREE.Scene();\n    scene.fog = new THREE.Fog( 0x000000, 1, 1000 );\n    object = new THREE.Object3D();\n    scene.add( object );\n\n    //============Box Geometry=================//\n\n    function generateGeometry( objectType, numObjects ) {\n        function applyVertexColors( geometry, color ) {\n            var position = geometry.attributes.position;\n            var colors = [];\n            for ( var i = 0; i < position.count; i ++ ) {\n                colors.push( color.r, color.g, color.b );\n            }\n            geometry.setAttribute( 'color', new THREE.Float32BufferAttribute( colors, 3 ) );\n        }\n        var geometries = [];\n        var matrix = new THREE.Matrix4();\n        var position = new THREE.Vector3();\n        var rotation = new THREE.Euler();\n        var quaternion = new THREE.Quaternion();\n        var scale = new THREE.Vector3();\n        var color = new THREE.Color();\n        for ( var i = 0; i < numObjects; i ++ ) {\n            position.x = Math.random() * 10000 - 5000;\n            position.y = Math.random() * 6000 - 3000;\n            position.z = Math.random() * 8000 - 4000;\n            rotation.x = Math.random() * 2 * Math.PI;\n            rotation.y = Math.random() * 2 * Math.PI;\n            rotation.z = Math.random() * 2 * Math.PI;\n            quaternion.setFromEuler( rotation );\n            scale.x = Math.random() * 200 + 100;\n            var geometry;\n            if ( objectType === 'cube' ) {\n                geometry = new THREE.BoxBufferGeometry( 1, 1, 1 );\n                geometry = geometry.toNonIndexed(); // merging needs consistent buffer geometries\n                scale.y = Math.random() * 200 + 100;\n                scale.z = Math.random() * 200 + 100;\n                color.setRGB( 0, 0, 0.1 + 0.9 * Math.random() );\n            } else if ( objectType === 'sphere' ) {\n                geometry = new THREE.IcosahedronBufferGeometry( 1, 1 );\n                scale.y = scale.z = scale.x;\n                color.setRGB( 0.1 + 0.9 * Math.random(), 0, 0 );\n            }\n            // give the geom's vertices a random color, to be displayed\n            applyVertexColors( geometry, color );\n            matrix.compose( position, quaternion, scale );\n            geometry.applyMatrix( matrix );\n            geometries.push( geometry );\n        }\n        return BufferGeometryUtils.mergeBufferGeometries( geometries );\n    }\n\n    let loader = new THREE.TextureLoader();\n    const bgTexture = loader.load(props.background);\n    scene.background = bgTexture;\n    //===============Light ====================//\n    scene.add( new THREE.AmbientLight( 0x222222 ) );\n    light = new THREE.DirectionalLight( 0xffffff );\n    light.position.set( 1, 1, 1 );\n    scene.add( light );\n    // postprocessing\n    composer = new EffectComposer( renderer );\n    composer.addPass( new RenderPass( scene, camera ) );\n    glitchPass = new GlitchPass();\n    composer.addPass( glitchPass );\n    //\n    window.addEventListener( 'resize', onWindowResize, false );\n    var wildGlitchOption = document.getElementById( 'wildGlitch' );\n    wildGlitchOption.addEventListener( 'change', updateOptions );\n    updateOptions();\n}\nfunction onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    composer.setSize( window.innerWidth, window.innerHeight );\n}\nfunction animate() {\n    requestAnimationFrame( animate );\n    composer.render();\n}\n\n    return () => {\n        document.body.removeChild( renderer.domElement );\n    };\n\n    }, [GlitchRef])\n    return (\n        <div>\n<div id = \"Channel-Div\">{props.channel}</div>\n            <div ref={GlitchRef} id =\"wildGlitch\"></div>\n            <div>\n                {props.audio===\"tv_static\" ? (\n                     <Sound\n                     url={tv_static}\n                     playStatus={Sound.status.PLAYING}\n                     loop\n                     />  \n                ) : props.audio===\"radio_static\" ? (\n                    <Sound\n                     url={radio_static}\n                     playStatus={Sound.status.PLAYING}\n                     loop\n                     />  \n                ) : props.audio===\"glitched_tones\" ? (\n                    <Sound\n                     url={glitched_tones}\n                     playStatus={Sound.status.PLAYING}\n                     loop\n                     />  \n                ) : props.audio===\"flatwoods\" ? (\n                    <Sound\n                     url={flatwoods}\n                     playStatus={Sound.status.PLAYING}\n                     loop\n                     />  \n                ) : props.audio===\"ns1\" ? (\n                    <Sound\n                     url={ns1}\n                     playStatus={Sound.status.PLAYING}\n                     loop\n                     />  \n                ) : props.audio===\"ns2\" ? (\n                    <Sound\n                     url={ns2}\n                     playStatus={Sound.status.PLAYING}\n                     loop\n                     />  \n                ) : props.audio===\"ns3\" ? (\n                    <Sound\n                     url={ns3}\n                     playStatus={Sound.status.PLAYING}\n                     loop\n                     />  \n                ) : null}\n            </div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}