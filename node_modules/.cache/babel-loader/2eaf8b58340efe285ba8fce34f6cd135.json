{"ast":null,"code":"import _slicedToArray from \"/Users/lambda_school_loaner_126/Desktop/CMT-FE/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/lambda_school_loaner_126/Desktop/CMT-FE/src/Components/ThreeEffects/Geometries/Stars.js\";\nimport React, { useRef, useMemo } from 'react';\nimport * as THREE from 'three';\nimport { apply as applyThree, Canvas, useRender, useThree } from 'react-three-fiber';\nimport { apply as applySpring, useSpring, a, interpolate } from 'react-spring/three'; //================Testing threeJS features===============================//\n\nexport default function Stars({\n  position\n}) {\n  let group = useRef();\n  let theta = 0;\n  useRender(() => {\n    const r = 5 * Math.sin(THREE.Math.degToRad(theta += 0.01));\n    const s = Math.cos(THREE.Math.degToRad(theta * 2));\n    group.current.rotation.set(r, r, r);\n    group.current.scale.set(s, s, s);\n  });\n\n  const _useMemo = useMemo(() => {\n    const geo = new THREE.SphereBufferGeometry(1, 10, 10);\n    const mat = new THREE.MeshBasicMaterial({\n      color: new THREE.Color('peachpuff'),\n      transparent: true\n    });\n    const coords = new Array(1000).fill().map(i => [Math.random() * 800 - 400, Math.random() * 800 - 400, Math.random() * 800 - 400]);\n    return [geo, mat, coords];\n  }, []),\n        _useMemo2 = _slicedToArray(_useMemo, 3),\n        geo = _useMemo2[0],\n        mat = _useMemo2[1],\n        coords = _useMemo2[2];\n\n  return React.createElement(a.group, {\n    ref: group,\n    position: position,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, coords.map(([p1, p2, p3], i) => React.createElement(\"mesh\", {\n    key: i,\n    geometry: geo,\n    material: mat,\n    position: [p1, p2, p3],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/lambda_school_loaner_126/Desktop/CMT-FE/src/Components/ThreeEffects/Geometries/Stars.js"],"names":["React","useRef","useMemo","THREE","apply","applyThree","Canvas","useRender","useThree","applySpring","useSpring","a","interpolate","Stars","position","group","theta","r","Math","sin","degToRad","s","cos","current","rotation","set","scale","geo","SphereBufferGeometry","mat","MeshBasicMaterial","color","Color","transparent","coords","Array","fill","map","i","random","p1","p2","p3"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,OAAvB,QAAsC,OAAtC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,KAAK,IAAIC,UAAlB,EAA8BC,MAA9B,EAAsCC,SAAtC,EAAiDC,QAAjD,QAAiE,mBAAjE;AACA,SAASJ,KAAK,IAAIK,WAAlB,EAA+BC,SAA/B,EAA0CC,CAA1C,EAA6CC,WAA7C,QAAgE,oBAAhE,C,CACA;;AACA,eAAe,SAASC,KAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAA6B;AACxC,MAAIC,KAAK,GAAGd,MAAM,EAAlB;AACA,MAAIe,KAAK,GAAG,CAAZ;AACAT,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,CAAC,GAAG,IAAIC,IAAI,CAACC,GAAL,CAAShB,KAAK,CAACe,IAAN,CAAWE,QAAX,CAAqBJ,KAAK,IAAI,IAA9B,CAAT,CAAd;AACA,UAAMK,CAAC,GAAGH,IAAI,CAACI,GAAL,CAASnB,KAAK,CAACe,IAAN,CAAWE,QAAX,CAAoBJ,KAAK,GAAG,CAA5B,CAAT,CAAV;AACAD,IAAAA,KAAK,CAACQ,OAAN,CAAcC,QAAd,CAAuBC,GAAvB,CAA2BR,CAA3B,EAA8BA,CAA9B,EAAiCA,CAAjC;AACAF,IAAAA,KAAK,CAACQ,OAAN,CAAcG,KAAd,CAAoBD,GAApB,CAAwBJ,CAAxB,EAA2BA,CAA3B,EAA8BA,CAA9B;AACD,GALQ,CAAT;;AAHwC,mBASbnB,OAAO,CAAC,MAAM;AACvC,UAAMyB,GAAG,GAAG,IAAIxB,KAAK,CAACyB,oBAAV,CAA+B,CAA/B,EAAkC,EAAlC,EAAsC,EAAtC,CAAZ;AACA,UAAMC,GAAG,GAAG,IAAI1B,KAAK,CAAC2B,iBAAV,CAA4B;AAAEC,MAAAA,KAAK,EAAE,IAAI5B,KAAK,CAAC6B,KAAV,CAAgB,WAAhB,CAAT;AAAuCC,MAAAA,WAAW,EAAE;AAApD,KAA5B,CAAZ;AACA,UAAMC,MAAM,GAAG,IAAIC,KAAJ,CAAU,IAAV,EAAgBC,IAAhB,GAAuBC,GAAvB,CAA2BC,CAAC,IAAI,CAACpB,IAAI,CAACqB,MAAL,KAAgB,GAAhB,GAAsB,GAAvB,EAA4BrB,IAAI,CAACqB,MAAL,KAAgB,GAAhB,GAAsB,GAAlD,EAAuDrB,IAAI,CAACqB,MAAL,KAAgB,GAAhB,GAAsB,GAA7E,CAAhC,CAAf;AACA,WAAO,CAACZ,GAAD,EAAME,GAAN,EAAWK,MAAX,CAAP;AACD,GALiC,EAK/B,EAL+B,CATM;AAAA;AAAA,QASjCP,GATiC;AAAA,QAS5BE,GAT4B;AAAA,QASvBK,MATuB;;AAexC,SACE,oBAAC,CAAD,CAAG,KAAH;AAAS,IAAA,GAAG,EAAEnB,KAAd;AAAqB,IAAA,QAAQ,EAAED,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGoB,MAAM,CAACG,GAAP,CAAW,CAAC,CAACG,EAAD,EAAKC,EAAL,EAASC,EAAT,CAAD,EAAeJ,CAAf,KACV;AAAM,IAAA,GAAG,EAAEA,CAAX;AAAc,IAAA,QAAQ,EAAEX,GAAxB;AAA6B,IAAA,QAAQ,EAAEE,GAAvC;AAA4C,IAAA,QAAQ,EAAE,CAACW,EAAD,EAAKC,EAAL,EAASC,EAAT,CAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CADF;AAOD","sourcesContent":["import React, {useRef, useMemo } from 'react'\nimport * as THREE from 'three' \nimport { apply as applyThree, Canvas, useRender, useThree } from 'react-three-fiber'\nimport { apply as applySpring, useSpring, a, interpolate } from 'react-spring/three'\n//================Testing threeJS features===============================//\nexport default function Stars({ position }) {\n    let group = useRef()\n    let theta = 0\n    useRender(() => {\n      const r = 5 * Math.sin(THREE.Math.degToRad((theta += 0.01)))\n      const s = Math.cos(THREE.Math.degToRad(theta * 2))\n      group.current.rotation.set(r, r, r)\n      group.current.scale.set(s, s, s)\n    })\n    const [geo, mat, coords] = useMemo(() => {\n      const geo = new THREE.SphereBufferGeometry(1, 10, 10)\n      const mat = new THREE.MeshBasicMaterial({ color: new THREE.Color('peachpuff'), transparent: true })\n      const coords = new Array(1000).fill().map(i => [Math.random() * 800 - 400, Math.random() * 800 - 400, Math.random() * 800 - 400])\n      return [geo, mat, coords]\n    }, [])\n    return (\n      <a.group ref={group} position={position}>\n        {coords.map(([p1, p2, p3], i) => (\n          <mesh key={i} geometry={geo} material={mat} position={[p1, p2, p3]} />\n        ))}\n      </a.group>\n    )\n  }"]},"metadata":{},"sourceType":"module"}